/**
 * Storage
 * Sphereon Storage APIs provide an abstraction layer for storage of containers (folders) and objects (files), using a filesystem backend or AWS-s3, Azure blobstorage or Google cloud storage backend.
 *
 * OpenAPI spec version: 0.7
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.storage.api;

import com.sphereon.sdk.storage.handler.ApiCallback;
import com.sphereon.sdk.storage.handler.ApiClient;
import com.sphereon.sdk.storage.handler.ApiException;
import com.sphereon.sdk.storage.handler.ApiResponse;
import com.sphereon.sdk.storage.handler.Configuration;
import com.sphereon.sdk.storage.handler.Pair;
import com.sphereon.sdk.storage.handler.ProgressRequestBody;
import com.sphereon.sdk.storage.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.sphereon.sdk.storage.model.BackendRequest;
import com.sphereon.sdk.storage.model.BackendResponse;
import com.sphereon.sdk.storage.model.ErrorResponse;
import com.sphereon.sdk.storage.model.ContainerResponse;
import com.sphereon.sdk.storage.model.ContainerRequest;
import com.sphereon.sdk.storage.model.ObjectResponse;
import java.io.File;
import com.sphereon.sdk.storage.model.ObjectInfoResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorageApi {
    private ApiClient apiClient;

    public StorageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createBackend */
    private com.squareup.okhttp.Call createBackendCall(BackendRequest backendRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = backendRequest;
        
        // verify the required parameter 'backendRequest' is set
        if (backendRequest == null) {
            throw new ApiException("Missing the required parameter 'backendRequest' when calling createBackend(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/backends".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new backend
     * Create a new backend
     * @param backendRequest backendRequest (required)
     * @return BackendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BackendResponse createBackend(BackendRequest backendRequest) throws ApiException {
        ApiResponse<BackendResponse> resp = createBackendWithHttpInfo(backendRequest);
        return resp.getData();
    }

    /**
     * Create a new backend
     * Create a new backend
     * @param backendRequest backendRequest (required)
     * @return ApiResponse&lt;BackendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BackendResponse> createBackendWithHttpInfo(BackendRequest backendRequest) throws ApiException {
        com.squareup.okhttp.Call call = createBackendCall(backendRequest, null, null);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new backend (asynchronously)
     * Create a new backend
     * @param backendRequest backendRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBackendAsync(BackendRequest backendRequest, final ApiCallback<BackendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBackendCall(backendRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createContainer */
    private com.squareup.okhttp.Call createContainerCall(ContainerRequest containerRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = containerRequest;
        
        // verify the required parameter 'containerRequest' is set
        if (containerRequest == null) {
            throw new ApiException("Missing the required parameter 'containerRequest' when calling createContainer(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/containers".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new container
     * Create a new container
     * @param containerRequest containerRequest (required)
     * @return ContainerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContainerResponse createContainer(ContainerRequest containerRequest) throws ApiException {
        ApiResponse<ContainerResponse> resp = createContainerWithHttpInfo(containerRequest);
        return resp.getData();
    }

    /**
     * Create a new container
     * Create a new container
     * @param containerRequest containerRequest (required)
     * @return ApiResponse&lt;ContainerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContainerResponse> createContainerWithHttpInfo(ContainerRequest containerRequest) throws ApiException {
        com.squareup.okhttp.Call call = createContainerCall(containerRequest, null, null);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new container (asynchronously)
     * Create a new container
     * @param containerRequest containerRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContainerAsync(ContainerRequest containerRequest, final ApiCallback<ContainerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContainerCall(containerRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createObject */
    private com.squareup.okhttp.Call createObjectCall(String containerId, String objectPath, File stream, String overwriteMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling createObject(Async)");
        }
        
        // verify the required parameter 'objectPath' is set
        if (objectPath == null) {
            throw new ApiException("Missing the required parameter 'objectPath' when calling createObject(Async)");
        }
        
        // verify the required parameter 'stream' is set
        if (stream == null) {
            throw new ApiException("Missing the required parameter 'stream' when calling createObject(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/containers/{containerId}/objects/{objectPath}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()))
        .replaceAll("\\{" + "objectPath" + "\\}", apiClient.escapeString(objectPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (overwriteMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "overwriteMode", overwriteMode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (stream != null)
        localVarFormParams.put("stream", stream);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new object within a container
     * 
     * @param containerId containerId (required)
     * @param objectPath objectPath (required)
     * @param stream stream (required)
     * @param overwriteMode overwriteMode (optional)
     * @return ObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectResponse createObject(String containerId, String objectPath, File stream, String overwriteMode) throws ApiException {
        ApiResponse<ObjectResponse> resp = createObjectWithHttpInfo(containerId, objectPath, stream, overwriteMode);
        return resp.getData();
    }

    /**
     * Create a new object within a container
     * 
     * @param containerId containerId (required)
     * @param objectPath objectPath (required)
     * @param stream stream (required)
     * @param overwriteMode overwriteMode (optional)
     * @return ApiResponse&lt;ObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectResponse> createObjectWithHttpInfo(String containerId, String objectPath, File stream, String overwriteMode) throws ApiException {
        com.squareup.okhttp.Call call = createObjectCall(containerId, objectPath, stream, overwriteMode, null, null);
        Type localVarReturnType = new TypeToken<ObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new object within a container (asynchronously)
     * 
     * @param containerId containerId (required)
     * @param objectPath objectPath (required)
     * @param stream stream (required)
     * @param overwriteMode overwriteMode (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createObjectAsync(String containerId, String objectPath, File stream, String overwriteMode, final ApiCallback<ObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createObjectCall(containerId, objectPath, stream, overwriteMode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createObjectInFolder */
    private com.squareup.okhttp.Call createObjectInFolderCall(String containerId, File stream, String overwriteMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling createObjectInFolder(Async)");
        }
        
        // verify the required parameter 'stream' is set
        if (stream == null) {
            throw new ApiException("Missing the required parameter 'stream' when calling createObjectInFolder(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/containers/{containerId}/objects/**".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (overwriteMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "overwriteMode", overwriteMode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (stream != null)
        localVarFormParams.put("stream", stream);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new object within a container
     * 
     * @param containerId containerId (required)
     * @param stream stream (required)
     * @param overwriteMode overwriteMode (optional)
     * @return ObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectResponse createObjectInFolder(String containerId, File stream, String overwriteMode) throws ApiException {
        ApiResponse<ObjectResponse> resp = createObjectInFolderWithHttpInfo(containerId, stream, overwriteMode);
        return resp.getData();
    }

    /**
     * Create a new object within a container
     * 
     * @param containerId containerId (required)
     * @param stream stream (required)
     * @param overwriteMode overwriteMode (optional)
     * @return ApiResponse&lt;ObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectResponse> createObjectInFolderWithHttpInfo(String containerId, File stream, String overwriteMode) throws ApiException {
        com.squareup.okhttp.Call call = createObjectInFolderCall(containerId, stream, overwriteMode, null, null);
        Type localVarReturnType = new TypeToken<ObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new object within a container (asynchronously)
     * 
     * @param containerId containerId (required)
     * @param stream stream (required)
     * @param overwriteMode overwriteMode (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createObjectInFolderAsync(String containerId, File stream, String overwriteMode, final ApiCallback<ObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createObjectInFolderCall(containerId, stream, overwriteMode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createObjectInFolder1 */
    private com.squareup.okhttp.Call createObjectInFolder1Call(String containerId, File stream, String overwriteMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling createObjectInFolder1(Async)");
        }
        
        // verify the required parameter 'stream' is set
        if (stream == null) {
            throw new ApiException("Missing the required parameter 'stream' when calling createObjectInFolder1(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/containers/{containerId}/objects/{objectPath}/**".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (overwriteMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "overwriteMode", overwriteMode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (stream != null)
        localVarFormParams.put("stream", stream);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new object within a container
     * 
     * @param containerId containerId (required)
     * @param stream stream (required)
     * @param overwriteMode overwriteMode (optional)
     * @return ObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectResponse createObjectInFolder1(String containerId, File stream, String overwriteMode) throws ApiException {
        ApiResponse<ObjectResponse> resp = createObjectInFolder1WithHttpInfo(containerId, stream, overwriteMode);
        return resp.getData();
    }

    /**
     * Create a new object within a container
     * 
     * @param containerId containerId (required)
     * @param stream stream (required)
     * @param overwriteMode overwriteMode (optional)
     * @return ApiResponse&lt;ObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectResponse> createObjectInFolder1WithHttpInfo(String containerId, File stream, String overwriteMode) throws ApiException {
        com.squareup.okhttp.Call call = createObjectInFolder1Call(containerId, stream, overwriteMode, null, null);
        Type localVarReturnType = new TypeToken<ObjectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new object within a container (asynchronously)
     * 
     * @param containerId containerId (required)
     * @param stream stream (required)
     * @param overwriteMode overwriteMode (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createObjectInFolder1Async(String containerId, File stream, String overwriteMode, final ApiCallback<ObjectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createObjectInFolder1Call(containerId, stream, overwriteMode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteBackend */
    private com.squareup.okhttp.Call deleteBackendCall(String backendId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'backendId' is set
        if (backendId == null) {
            throw new ApiException("Missing the required parameter 'backendId' when calling deleteBackend(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/backends/{backendId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "backendId" + "\\}", apiClient.escapeString(backendId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete a backend
     * Delete a backend
     * @param backendId backendId (required)
     * @return BackendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BackendResponse deleteBackend(String backendId) throws ApiException {
        ApiResponse<BackendResponse> resp = deleteBackendWithHttpInfo(backendId);
        return resp.getData();
    }

    /**
     * Delete a backend
     * Delete a backend
     * @param backendId backendId (required)
     * @return ApiResponse&lt;BackendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BackendResponse> deleteBackendWithHttpInfo(String backendId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBackendCall(backendId, null, null);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a backend (asynchronously)
     * Delete a backend
     * @param backendId backendId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBackendAsync(String backendId, final ApiCallback<BackendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBackendCall(backendId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteContainer */
    private com.squareup.okhttp.Call deleteContainerCall(String containerId, String delete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling deleteContainer(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/containers/{containerId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (delete != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "delete", delete));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete an existing container
     * Delete an existing container including the stored objects if indicated.
     * @param containerId containerId (required)
     * @param delete delete (optional)
     * @return ContainerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContainerResponse deleteContainer(String containerId, String delete) throws ApiException {
        ApiResponse<ContainerResponse> resp = deleteContainerWithHttpInfo(containerId, delete);
        return resp.getData();
    }

    /**
     * Delete an existing container
     * Delete an existing container including the stored objects if indicated.
     * @param containerId containerId (required)
     * @param delete delete (optional)
     * @return ApiResponse&lt;ContainerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContainerResponse> deleteContainerWithHttpInfo(String containerId, String delete) throws ApiException {
        com.squareup.okhttp.Call call = deleteContainerCall(containerId, delete, null, null);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an existing container (asynchronously)
     * Delete an existing container including the stored objects if indicated.
     * @param containerId containerId (required)
     * @param delete delete (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContainerAsync(String containerId, String delete, final ApiCallback<ContainerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContainerCall(containerId, delete, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteObject */
    private com.squareup.okhttp.Call deleteObjectCall(String containerId, String objectPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling deleteObject(Async)");
        }
        
        // verify the required parameter 'objectPath' is set
        if (objectPath == null) {
            throw new ApiException("Missing the required parameter 'objectPath' when calling deleteObject(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/containers/{containerId}/objects/{objectPath}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()))
        .replaceAll("\\{" + "objectPath" + "\\}", apiClient.escapeString(objectPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete an existing object from a container.
     * Delete an existing object from a container. There is no request nor response body for a delete request.
     * @param containerId containerId (required)
     * @param objectPath objectPath (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteObject(String containerId, String objectPath) throws ApiException {
        deleteObjectWithHttpInfo(containerId, objectPath);
    }

    /**
     * Delete an existing object from a container.
     * Delete an existing object from a container. There is no request nor response body for a delete request.
     * @param containerId containerId (required)
     * @param objectPath objectPath (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteObjectWithHttpInfo(String containerId, String objectPath) throws ApiException {
        com.squareup.okhttp.Call call = deleteObjectCall(containerId, objectPath, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an existing object from a container. (asynchronously)
     * Delete an existing object from a container. There is no request nor response body for a delete request.
     * @param containerId containerId (required)
     * @param objectPath objectPath (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteObjectAsync(String containerId, String objectPath, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteObjectCall(containerId, objectPath, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getBackendInfo */
    private com.squareup.okhttp.Call getBackendInfoCall(String backendId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'backendId' is set
        if (backendId == null) {
            throw new ApiException("Missing the required parameter 'backendId' when calling getBackendInfo(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/backends/{backendId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "backendId" + "\\}", apiClient.escapeString(backendId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get backend information
     * Get information on a backend
     * @param backendId backendId (required)
     * @return BackendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BackendResponse getBackendInfo(String backendId) throws ApiException {
        ApiResponse<BackendResponse> resp = getBackendInfoWithHttpInfo(backendId);
        return resp.getData();
    }

    /**
     * Get backend information
     * Get information on a backend
     * @param backendId backendId (required)
     * @return ApiResponse&lt;BackendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BackendResponse> getBackendInfoWithHttpInfo(String backendId) throws ApiException {
        com.squareup.okhttp.Call call = getBackendInfoCall(backendId, null, null);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get backend information (asynchronously)
     * Get information on a backend
     * @param backendId backendId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBackendInfoAsync(String backendId, final ApiCallback<BackendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBackendInfoCall(backendId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getContainerInfo */
    private com.squareup.okhttp.Call getContainerInfoCall(String containerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling getContainerInfo(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/containers/{containerId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get container information
     * Get information on a container
     * @param containerId containerId (required)
     * @return ContainerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContainerResponse getContainerInfo(String containerId) throws ApiException {
        ApiResponse<ContainerResponse> resp = getContainerInfoWithHttpInfo(containerId);
        return resp.getData();
    }

    /**
     * Get container information
     * Get information on a container
     * @param containerId containerId (required)
     * @return ApiResponse&lt;ContainerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContainerResponse> getContainerInfoWithHttpInfo(String containerId) throws ApiException {
        com.squareup.okhttp.Call call = getContainerInfoCall(containerId, null, null);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get container information (asynchronously)
     * Get information on a container
     * @param containerId containerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContainerInfoAsync(String containerId, final ApiCallback<ContainerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContainerInfoCall(containerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getObject */
    private com.squareup.okhttp.Call getObjectCall(String containerId, String objectPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling getObject(Async)");
        }
        
        // verify the required parameter 'objectPath' is set
        if (objectPath == null) {
            throw new ApiException("Missing the required parameter 'objectPath' when calling getObject(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/containers/{containerId}/objects/{objectPath}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()))
        .replaceAll("\\{" + "objectPath" + "\\}", apiClient.escapeString(objectPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get an existing object from a container
     * Get an existing object from a container
     * @param containerId containerId (required)
     * @param objectPath objectPath (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] getObject(String containerId, String objectPath) throws ApiException {
        ApiResponse<byte[]> resp = getObjectWithHttpInfo(containerId, objectPath);
        return resp.getData();
    }

    /**
     * Get an existing object from a container
     * Get an existing object from a container
     * @param containerId containerId (required)
     * @param objectPath objectPath (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> getObjectWithHttpInfo(String containerId, String objectPath) throws ApiException {
        com.squareup.okhttp.Call call = getObjectCall(containerId, objectPath, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an existing object from a container (asynchronously)
     * Get an existing object from a container
     * @param containerId containerId (required)
     * @param objectPath objectPath (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getObjectAsync(String containerId, String objectPath, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getObjectCall(containerId, objectPath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listContainers */
    private com.squareup.okhttp.Call listContainersCall(String backendId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'backendId' is set
        if (backendId == null) {
            throw new ApiException("Missing the required parameter 'backendId' when calling listContainers(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/backends/{backendId}/containers".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "backendId" + "\\}", apiClient.escapeString(backendId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List containers
     * List containers for the given backend name or id.
     * @param backendId backendId (required)
     * @return List&lt;ContainerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContainerResponse> listContainers(String backendId) throws ApiException {
        ApiResponse<List<ContainerResponse>> resp = listContainersWithHttpInfo(backendId);
        return resp.getData();
    }

    /**
     * List containers
     * List containers for the given backend name or id.
     * @param backendId backendId (required)
     * @return ApiResponse&lt;List&lt;ContainerResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContainerResponse>> listContainersWithHttpInfo(String backendId) throws ApiException {
        com.squareup.okhttp.Call call = listContainersCall(backendId, null, null);
        Type localVarReturnType = new TypeToken<List<ContainerResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List containers (asynchronously)
     * List containers for the given backend name or id.
     * @param backendId backendId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listContainersAsync(String backendId, final ApiCallback<List<ContainerResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listContainersCall(backendId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContainerResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listObjects */
    private com.squareup.okhttp.Call listObjectsCall(String containerId, String objectPath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling listObjects(Async)");
        }
        
        // verify the required parameter 'objectPath' is set
        if (objectPath == null) {
            throw new ApiException("Missing the required parameter 'objectPath' when calling listObjects(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/containers/{containerId}/list/{objectPath}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()))
        .replaceAll("\\{" + "objectPath" + "\\}", apiClient.escapeString(objectPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List objects in path
     * 
     * @param containerId containerId (required)
     * @param objectPath objectPath (required)
     * @return List&lt;ObjectInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ObjectInfoResponse> listObjects(String containerId, String objectPath) throws ApiException {
        ApiResponse<List<ObjectInfoResponse>> resp = listObjectsWithHttpInfo(containerId, objectPath);
        return resp.getData();
    }

    /**
     * List objects in path
     * 
     * @param containerId containerId (required)
     * @param objectPath objectPath (required)
     * @return ApiResponse&lt;List&lt;ObjectInfoResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ObjectInfoResponse>> listObjectsWithHttpInfo(String containerId, String objectPath) throws ApiException {
        com.squareup.okhttp.Call call = listObjectsCall(containerId, objectPath, null, null);
        Type localVarReturnType = new TypeToken<List<ObjectInfoResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List objects in path (asynchronously)
     * 
     * @param containerId containerId (required)
     * @param objectPath objectPath (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listObjectsAsync(String containerId, String objectPath, final ApiCallback<List<ObjectInfoResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listObjectsCall(containerId, objectPath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ObjectInfoResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listObjectsInFolder */
    private com.squareup.okhttp.Call listObjectsInFolderCall(String containerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling listObjectsInFolder(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/containers/{containerId}/list".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List objects in path
     * 
     * @param containerId containerId (required)
     * @return List&lt;ObjectInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ObjectInfoResponse> listObjectsInFolder(String containerId) throws ApiException {
        ApiResponse<List<ObjectInfoResponse>> resp = listObjectsInFolderWithHttpInfo(containerId);
        return resp.getData();
    }

    /**
     * List objects in path
     * 
     * @param containerId containerId (required)
     * @return ApiResponse&lt;List&lt;ObjectInfoResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ObjectInfoResponse>> listObjectsInFolderWithHttpInfo(String containerId) throws ApiException {
        com.squareup.okhttp.Call call = listObjectsInFolderCall(containerId, null, null);
        Type localVarReturnType = new TypeToken<List<ObjectInfoResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List objects in path (asynchronously)
     * 
     * @param containerId containerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listObjectsInFolderAsync(String containerId, final ApiCallback<List<ObjectInfoResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listObjectsInFolderCall(containerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ObjectInfoResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listObjectsInFolder1 */
    private com.squareup.okhttp.Call listObjectsInFolder1Call(String containerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling listObjectsInFolder1(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/containers/{containerId}/list/**".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List objects in path
     * 
     * @param containerId containerId (required)
     * @return List&lt;ObjectInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ObjectInfoResponse> listObjectsInFolder1(String containerId) throws ApiException {
        ApiResponse<List<ObjectInfoResponse>> resp = listObjectsInFolder1WithHttpInfo(containerId);
        return resp.getData();
    }

    /**
     * List objects in path
     * 
     * @param containerId containerId (required)
     * @return ApiResponse&lt;List&lt;ObjectInfoResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ObjectInfoResponse>> listObjectsInFolder1WithHttpInfo(String containerId) throws ApiException {
        com.squareup.okhttp.Call call = listObjectsInFolder1Call(containerId, null, null);
        Type localVarReturnType = new TypeToken<List<ObjectInfoResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List objects in path (asynchronously)
     * 
     * @param containerId containerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listObjectsInFolder1Async(String containerId, final ApiCallback<List<ObjectInfoResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listObjectsInFolder1Call(containerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ObjectInfoResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listObjectsInFolder2 */
    private com.squareup.okhttp.Call listObjectsInFolder2Call(String containerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling listObjectsInFolder2(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/containers/{containerId}/list/{objectPath}/**".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List objects in path
     * 
     * @param containerId containerId (required)
     * @return List&lt;ObjectInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ObjectInfoResponse> listObjectsInFolder2(String containerId) throws ApiException {
        ApiResponse<List<ObjectInfoResponse>> resp = listObjectsInFolder2WithHttpInfo(containerId);
        return resp.getData();
    }

    /**
     * List objects in path
     * 
     * @param containerId containerId (required)
     * @return ApiResponse&lt;List&lt;ObjectInfoResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ObjectInfoResponse>> listObjectsInFolder2WithHttpInfo(String containerId) throws ApiException {
        com.squareup.okhttp.Call call = listObjectsInFolder2Call(containerId, null, null);
        Type localVarReturnType = new TypeToken<List<ObjectInfoResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List objects in path (asynchronously)
     * 
     * @param containerId containerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listObjectsInFolder2Async(String containerId, final ApiCallback<List<ObjectInfoResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listObjectsInFolder2Call(containerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ObjectInfoResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateBackend */
    private com.squareup.okhttp.Call updateBackendCall(String backendId, BackendRequest backendRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = backendRequest;
        
        // verify the required parameter 'backendId' is set
        if (backendId == null) {
            throw new ApiException("Missing the required parameter 'backendId' when calling updateBackend(Async)");
        }
        
        // verify the required parameter 'backendRequest' is set
        if (backendRequest == null) {
            throw new ApiException("Missing the required parameter 'backendRequest' when calling updateBackend(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/backends/{backendId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "backendId" + "\\}", apiClient.escapeString(backendId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update a backend
     * Update a backend
     * @param backendId backendId (required)
     * @param backendRequest backendRequest (required)
     * @return BackendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BackendResponse updateBackend(String backendId, BackendRequest backendRequest) throws ApiException {
        ApiResponse<BackendResponse> resp = updateBackendWithHttpInfo(backendId, backendRequest);
        return resp.getData();
    }

    /**
     * Update a backend
     * Update a backend
     * @param backendId backendId (required)
     * @param backendRequest backendRequest (required)
     * @return ApiResponse&lt;BackendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BackendResponse> updateBackendWithHttpInfo(String backendId, BackendRequest backendRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateBackendCall(backendId, backendRequest, null, null);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a backend (asynchronously)
     * Update a backend
     * @param backendId backendId (required)
     * @param backendRequest backendRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBackendAsync(String backendId, BackendRequest backendRequest, final ApiCallback<BackendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBackendCall(backendId, backendRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateContainer */
    private com.squareup.okhttp.Call updateContainerCall(String containerId, ContainerRequest containerRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = containerRequest;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling updateContainer(Async)");
        }
        
        // verify the required parameter 'containerRequest' is set
        if (containerRequest == null) {
            throw new ApiException("Missing the required parameter 'containerRequest' when calling updateContainer(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/bucket-storage/0.7/containers/{containerId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update a container
     * Update an existing container with new container settings
     * @param containerId containerId (required)
     * @param containerRequest containerRequest (required)
     * @return ContainerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContainerResponse updateContainer(String containerId, ContainerRequest containerRequest) throws ApiException {
        ApiResponse<ContainerResponse> resp = updateContainerWithHttpInfo(containerId, containerRequest);
        return resp.getData();
    }

    /**
     * Update a container
     * Update an existing container with new container settings
     * @param containerId containerId (required)
     * @param containerRequest containerRequest (required)
     * @return ApiResponse&lt;ContainerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContainerResponse> updateContainerWithHttpInfo(String containerId, ContainerRequest containerRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateContainerCall(containerId, containerRequest, null, null);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a container (asynchronously)
     * Update an existing container with new container settings
     * @param containerId containerId (required)
     * @param containerRequest containerRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContainerAsync(String containerId, ContainerRequest containerRequest, final ApiCallback<ContainerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContainerCall(containerId, containerRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
