/**
 * Storage
 * Sphereon Storage APIs provide an abstraction layer for storage of containers (folders) and objects (files), using a filesystem backend or AWS-s3, Azure blobstorage or Google cloud storage backend.
 * <p>
 * OpenAPI spec version: 0.6.0
 * Contact: dev@sphereon.com
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.storage.api;

import com.sphereon.sdk.storage.handler.ApiException;
import com.sphereon.sdk.storage.model.BackendRequest;
import com.sphereon.sdk.storage.model.BackendResponse;
import com.sphereon.sdk.storage.model.ErrorResponse;
import com.sphereon.sdk.storage.model.ContainerResponse;
import com.sphereon.sdk.storage.model.ContainerRequest;

import java.io.File;

import org.junit.Assert;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StorageApi
 */

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class StorageApiTest {

    public static final String TEST_BACKEND = "test-backend";
    private final StorageApi api = new StorageApi();
    private static final String ACCESS_TOKEN = "0dbd17f1-c108-350e-807e-42d13e543b32";

    private static BackendResponse backendResponse;

    /**
     * Create a new backend
     *
     * Create a new backend
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void _01_createBackendTest() throws ApiException {
        api.getApiClient().setAccessToken(ACCESS_TOKEN);

        BackendRequest backendRequest = new BackendRequest();
        backendRequest.setBackendType(BackendRequest.BackendTypeEnum.FILESYSTEM);
        backendRequest.setAuthenticationProvider(BackendRequest.AuthenticationProviderEnum.API_SUPPLIER);
        backendRequest.setName(TEST_BACKEND);
        backendRequest.setDescription("Test backend");
        backendResponse = api.createBackend(backendRequest);
        Assert.assertNotNull(backendResponse);
        Assert.assertEquals(TEST_BACKEND, backendResponse.getName());

    }

    /**
     * Create a new container
     *
     * Create a new container
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContainerTest() throws ApiException {
        ContainerRequest containerRequest = null;
        // ContainerResponse response = api.createContainer(containerRequest);

        // TODO: test validations
    }

    /**
     * Create a new object within a container
     *
     * Create a new object within a container. If the container did not exist yet, it will be created on the fly with a default policy, hence no 404 http status will be returned
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createObjectTest() throws ApiException {
        String containerId = null;
        String objectPath = null;
        File stream = null;
        // api.createObject(containerId, objectPath, stream);

        // TODO: test validations
    }

    /**
     * Delete a backend
     *
     * Delete a backend
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void _15_deleteBackendTest() throws ApiException {
        BackendResponse response = api.deleteBackend(TEST_BACKEND);
        Assert.assertNotNull(response);
        Assert.assertEquals(TEST_BACKEND, response.getName());
        Assert.assertEquals(backendResponse.getId(), response.getId());
    }

    /**
     * Delete an existing container
     *
     * Delete an existing container including the stored objects if indicated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContainerTest() throws ApiException {
        String containerId = null;
        String delete = null;
        // ContainerResponse response = api.deleteContainer(containerId, delete);

        // TODO: test validations
    }

    /**
     * Delete an existing object from a container.
     *
     * Delete an existing object from a container. There is no request nor response body for a delete request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteObjectTest() throws ApiException {
        String containerId = null;
        String objectPath = null;
        // api.deleteObject(containerId, objectPath);

        // TODO: test validations
    }

    /**
     * Get an existing object from a container
     *
     * Get an existing object from a container
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getObjectTest() throws ApiException {
        String containerId = null;
        String objectPath = null;
        // api.getObject(containerId, objectPath);

        // TODO: test validations
    }

    /**
     * Update a backend
     *
     * Update a backend
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBackendTest() throws ApiException {
        String backendId = null;
        BackendRequest backendRequest = null;
        // BackendResponse response = api.updateBackend(backendId, backendRequest);

        // TODO: test validations
    }

    /**
     * Update a container
     *
     * Update an existing container with new container settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContainerTest() throws ApiException {
        String containerId = null;
        ContainerRequest containerRequest = null;
        // ContainerResponse response = api.updateContainer(containerId, containerRequest);

        // TODO: test validations
    }

}
