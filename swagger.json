{
  "basePath": "/",
  "paths": {
    "/bucket-storage/0.7/containers/{containerId}": {
      "post": {
        "summary": "Update a container",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Update an existing container with new container settings",
        "operationId": "updateContainer",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/ContainerResponse"},
            "description": "Container updated"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid Container request"
          },
          "404": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Backend was not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "containerId",
            "description": "containerId",
            "type": "string",
            "required": true
          },
          {
            "schema": {"$ref": "#/definitions/ContainerRequest"},
            "in": "body",
            "name": "containerRequest",
            "description": "containerRequest",
            "required": true
          }
        ],
        "tags": ["Storage"],
        "consumes": ["application/json;charset=UTF-8"]
      },
      "get": {
        "summary": "Get container information",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Get information on a container",
        "operationId": "getContainerInfo",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/ContainerResponse"},
            "description": "Container info returned"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid container name or id"
          },
          "404": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Container does not exist"
          }
        },
        "parameters": [{
          "in": "path",
          "name": "containerId",
          "description": "containerId",
          "type": "string",
          "required": true
        }],
        "tags": ["Storage"],
        "consumes": ["application/json"]
      },
      "delete": {
        "summary": "Delete an existing container",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Delete an existing container including the stored objects if indicated.",
        "operationId": "deleteContainer",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/ContainerResponse"},
            "description": "Container deleted"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid container name or container was not empty and recursion was not set"
          },
          "404": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Container was not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "containerId",
            "description": "containerId",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "delete",
            "description": "delete",
            "type": "string",
            "required": false,
            "enum": [
              "RECURSIVE",
              "EMPTY_ONLY"
            ]
          }
        ],
        "tags": ["Storage"],
        "consumes": ["application/json"]
      }
    },
    "/bucket-storage/0.7/containers/{containerId}/list": {"get": {
      "summary": "List objects in path",
      "security": [{"oauth2schema": ["global"]}],
      "produces": ["application/json"],
      "operationId": "listObjectsInFolder",
      "responses": {
        "201": {
          "schema": {
            "type": "array",
            "items": {"$ref": "#/definitions/ObjectInfoResponse"}
          },
          "description": "Created"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid container or object request"
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Container was not found"
        }
      },
      "parameters": [{
        "in": "path",
        "name": "containerId",
        "description": "containerId",
        "type": "string",
        "required": true
      }],
      "tags": ["Storage"],
      "consumes": ["application/json"]
    }},
    "/bucket-storage/0.7/containers/{containerId}/objects/{objectPath}": {
      "post": {
        "summary": "Create a new object within a container",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json"],
        "operationId": "createObject",
        "responses": {
          "201": {
            "schema": {"$ref": "#/definitions/ObjectResponse"},
            "description": "Object created"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid container or object request"
          },
          "404": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Container was not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "containerId",
            "description": "containerId",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "objectPath",
            "description": "objectPath",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "overwriteMode",
            "description": "overwriteMode",
            "type": "string",
            "required": false,
            "enum": [
              "DONT_OVERWRITE",
              "OVERWRITE"
            ]
          },
          {
            "in": "formData",
            "name": "stream",
            "description": "stream",
            "type": "file",
            "required": true
          }
        ],
        "tags": ["Storage"],
        "consumes": ["multipart/form-data"]
      },
      "get": {
        "summary": "Get an existing object from a container",
        "security": [{"oauth2schema": ["global"]}],
        "produces": [
          "application/octet-stream",
          "application/json;charset=UTF-8"
        ],
        "description": "Get an existing object from a container",
        "operationId": "getObject",
        "responses": {
          "200": {
            "schema": {
              "format": "byte",
              "type": "string"
            },
            "description": "Object retrieved"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid container or object name"
          },
          "404": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Object or container did not exist"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "containerId",
            "description": "containerId",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "objectPath",
            "description": "objectPath",
            "type": "string",
            "required": true
          }
        ],
        "tags": ["Storage"],
        "consumes": ["application/json"]
      },
      "delete": {
        "summary": "Delete an existing object from a container.",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["*/*"],
        "description": "Delete an existing object from a container. There is no request nor response body for a delete request.",
        "operationId": "deleteObject",
        "responses": {
          "200": {"description": "Object deleted"},
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid container or object name"
          },
          "404": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Container or object was not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "containerId",
            "description": "containerId",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "objectPath",
            "description": "objectPath",
            "type": "string",
            "required": true
          }
        ],
        "tags": ["Storage"],
        "consumes": ["application/json"]
      }
    },
    "/bucket-storage/0.7/backends/{backendId}/containers": {"get": {
      "summary": "List containers",
      "security": [{"oauth2schema": ["global"]}],
      "produces": ["application/json;charset=UTF-8"],
      "description": "List containers for the given backend name or id.",
      "operationId": "listContainers",
      "responses": {
        "200": {
          "schema": {
            "type": "array",
            "items": {"$ref": "#/definitions/ContainerResponse"}
          },
          "description": "Container info returned"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid backend name or id"
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Backend does not exist"
        }
      },
      "parameters": [{
        "in": "path",
        "name": "backendId",
        "description": "backendId",
        "type": "string",
        "required": true
      }],
      "tags": ["Storage"],
      "consumes": ["application/json"]
    }},
    "/bucket-storage/0.7/backends/{backendId}": {
      "post": {
        "summary": "Update a backend",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Update a backend",
        "operationId": "updateBackend",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/BackendResponse"},
            "description": "Backend updated"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid backend request"
          },
          "404": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Backend was not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "backendId",
            "description": "backendId",
            "type": "string",
            "required": true
          },
          {
            "schema": {"$ref": "#/definitions/BackendRequest"},
            "in": "body",
            "name": "backendRequest",
            "description": "backendRequest",
            "required": true
          }
        ],
        "tags": ["Storage"],
        "consumes": ["application/json;charset=UTF-8"]
      },
      "get": {
        "summary": "Get backend information",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Get information on a backend",
        "operationId": "getBackendInfo",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/BackendResponse"},
            "description": "Container info returned"
          },
          "400": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Invalid backend name or id"
          },
          "404": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Container does not exist"
          }
        },
        "parameters": [{
          "in": "path",
          "name": "backendId",
          "description": "backendId",
          "type": "string",
          "required": true
        }],
        "tags": ["Storage"],
        "consumes": ["application/json"]
      },
      "delete": {
        "summary": "Delete a backend",
        "security": [{"oauth2schema": ["global"]}],
        "produces": ["application/json;charset=UTF-8"],
        "description": "Delete a backend",
        "operationId": "deleteBackend",
        "responses": {
          "200": {
            "schema": {"$ref": "#/definitions/BackendResponse"},
            "description": "Backend deleted"
          },
          "404": {
            "schema": {"$ref": "#/definitions/ErrorResponse"},
            "description": "Backend was already deleted or unknown backend"
          }
        },
        "parameters": [{
          "in": "path",
          "name": "backendId",
          "description": "backendId",
          "type": "string",
          "required": true
        }],
        "tags": ["Storage"],
        "consumes": ["application/json"]
      }
    },
    "/bucket-storage/0.7/containers/{containerId}/objects/**": {"post": {
      "summary": "Create a new object within a container",
      "security": [{"oauth2schema": ["global"]}],
      "produces": ["application/json"],
      "operationId": "createObjectInFolder",
      "responses": {
        "201": {
          "schema": {"$ref": "#/definitions/ObjectResponse"},
          "description": "Object created"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid container or object request"
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Container was not found"
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "containerId",
          "description": "containerId",
          "type": "string",
          "required": true
        },
        {
          "in": "query",
          "name": "overwriteMode",
          "description": "overwriteMode",
          "type": "string",
          "required": false,
          "enum": [
            "DONT_OVERWRITE",
            "OVERWRITE"
          ]
        },
        {
          "in": "formData",
          "name": "stream",
          "description": "stream",
          "type": "file",
          "required": true
        }
      ],
      "tags": ["Storage"],
      "consumes": ["multipart/form-data"]
    }},
    "/bucket-storage/0.7/backends": {"post": {
      "summary": "Create a new backend",
      "security": [{"oauth2schema": ["global"]}],
      "produces": ["application/json;charset=UTF-8"],
      "description": "Create a new backend",
      "operationId": "createBackend",
      "responses": {
        "201": {
          "schema": {"$ref": "#/definitions/BackendResponse"},
          "description": "Backend created"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid backend request"
        }
      },
      "parameters": [{
        "schema": {"$ref": "#/definitions/BackendRequest"},
        "in": "body",
        "name": "backendRequest",
        "description": "backendRequest",
        "required": true
      }],
      "tags": ["Storage"],
      "consumes": ["application/json;charset=UTF-8"]
    }},
    "/bucket-storage/0.7/containers/{containerId}/list/**": {"get": {
      "summary": "List objects in path",
      "security": [{"oauth2schema": ["global"]}],
      "produces": ["application/json"],
      "operationId": "listObjectsInFolder_1",
      "responses": {
        "201": {
          "schema": {
            "type": "array",
            "items": {"$ref": "#/definitions/ObjectInfoResponse"}
          },
          "description": "Created"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid container or object request"
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Container was not found"
        }
      },
      "parameters": [{
        "in": "path",
        "name": "containerId",
        "description": "containerId",
        "type": "string",
        "required": true
      }],
      "tags": ["Storage"],
      "consumes": ["application/json"]
    }},
    "/bucket-storage/0.7/containers/{containerId}/list/{objectPath}/**": {"get": {
      "summary": "List objects in path",
      "security": [{"oauth2schema": ["global"]}],
      "produces": ["application/json"],
      "operationId": "listObjectsInFolder_2",
      "responses": {
        "201": {
          "schema": {
            "type": "array",
            "items": {"$ref": "#/definitions/ObjectInfoResponse"}
          },
          "description": "Created"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid container or object request"
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Container was not found"
        }
      },
      "parameters": [{
        "in": "path",
        "name": "containerId",
        "description": "containerId",
        "type": "string",
        "required": true
      }],
      "tags": ["Storage"],
      "consumes": ["application/json"]
    }},
    "/bucket-storage/0.7/containers/{containerId}/objects/{objectPath}/**": {"post": {
      "summary": "Create a new object within a container",
      "security": [{"oauth2schema": ["global"]}],
      "produces": ["application/json"],
      "operationId": "createObjectInFolder_1",
      "responses": {
        "201": {
          "schema": {"$ref": "#/definitions/ObjectResponse"},
          "description": "Object created"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid container or object request"
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Container was not found"
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "containerId",
          "description": "containerId",
          "type": "string",
          "required": true
        },
        {
          "in": "query",
          "name": "overwriteMode",
          "description": "overwriteMode",
          "type": "string",
          "required": false,
          "enum": [
            "DONT_OVERWRITE",
            "OVERWRITE"
          ]
        },
        {
          "in": "formData",
          "name": "stream",
          "description": "stream",
          "type": "file",
          "required": true
        }
      ],
      "tags": ["Storage"],
      "consumes": ["multipart/form-data"]
    }},
    "/bucket-storage/0.7/containers": {"post": {
      "summary": "Create a new container",
      "security": [{"oauth2schema": ["global"]}],
      "produces": ["application/json;charset=UTF-8"],
      "description": "Create a new container",
      "operationId": "createContainer",
      "responses": {
        "201": {
          "schema": {"$ref": "#/definitions/ContainerResponse"},
          "description": "Container created"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid Container request"
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Backend was not found"
        }
      },
      "parameters": [{
        "schema": {"$ref": "#/definitions/ContainerRequest"},
        "in": "body",
        "name": "containerRequest",
        "description": "containerRequest",
        "required": true
      }],
      "tags": ["Storage"],
      "consumes": ["application/json;charset=UTF-8"]
    }},
    "/bucket-storage/0.7/containers/{containerId}/list/{objectPath}": {"get": {
      "summary": "List objects in path",
      "security": [{"oauth2schema": ["global"]}],
      "produces": ["application/json"],
      "operationId": "listObjects",
      "responses": {
        "201": {
          "schema": {
            "type": "array",
            "items": {"$ref": "#/definitions/ObjectInfoResponse"}
          },
          "description": "Created"
        },
        "400": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Invalid container or object request"
        },
        "404": {
          "schema": {"$ref": "#/definitions/ErrorResponse"},
          "description": "Container was not found"
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "containerId",
          "description": "containerId",
          "type": "string",
          "required": true
        },
        {
          "in": "path",
          "name": "objectPath",
          "description": "objectPath",
          "type": "string",
          "required": true
        }
      ],
      "tags": ["Storage"],
      "consumes": ["application/json"]
    }}
  },
  "host": "gw.api.cloud.sphereon.com",
  "schemes": ["https"],
  "securityDefinitions": {"oauth2schema": {
    "tokenUrl": "https://gw.api.cloud.sphereon.com/token",
    "scopes": {"global": "accessEverything"},
    "type": "oauth2",
    "flow": "application"
  }},
  "definitions": {
    "BackendRequest": {
      "type": "object",
      "properties": {
        "backendType": {
          "description": "The type of backend that is created. This field allows users to create a local backend or with supported 3rd parties.",
          "type": "string",
          "enum": [
            "SHARED_STORAGE",
            "AMAZON_S3",
            "MS_AZURE_BLOB_STORAGE",
            "GOOGLE_CLOUD_STORAGE"
          ]
        },
        "name": {"type": "string"},
        "description": {"type": "string"},
        "parentId": {
          "description": "The backend that is used for when properties are not set. This allows usernamePasswordCredentials to be set at one backend and used by multiple backends.",
          "type": "string"
        },
        "requestCredentials": {
          "description": "The credentials details",
          "$ref": "#/definitions/RequestCredentials"
        }
      }
    },
    "ContainerResponse": {
      "type": "object",
      "properties": {
        "name": {"type": "string"},
        "backendId": {
          "description": "The backend in which the container will be stored or is stored.",
          "type": "string"
        },
        "id": {"type": "string"},
        "state": {
          "type": "string",
          "enum": [
            "REQUEST",
            "CREATED",
            "UPDATED",
            "DELETED"
          ]
        }
      }
    },
    "OAuthCredentials": {
      "type": "object",
      "properties": {
        "authenticationProvider": {
          "type": "string",
          "enum": [
            "API_SUPPLIER",
            "END_USER"
          ]
        },
        "secretkey": {"type": "string"},
        "accesskeyid": {"type": "string"}
      }
    },
    "BackendResponse": {
      "type": "object",
      "properties": {
        "backendType": {
          "description": "The type of backend that is created. This field allows users to create a local backend or with supported 3rd parties.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "SHARED_STORAGE",
            "AMAZON_S3",
            "MS_AZURE_BLOB_STORAGE",
            "GOOGLE_CLOUD_STORAGE"
          ]
        },
        "name": {"type": "string"},
        "id": {"type": "string"},
        "state": {
          "type": "string",
          "enum": [
            "REQUEST",
            "CREATED",
            "UPDATED",
            "DELETED"
          ]
        },
        "parentId": {
          "description": "The backend that is used for when properties are not set. This allows credentials to be set at one backend and used by multiple backends.",
          "type": "string"
        }
      }
    },
    "Error": {
      "description": "An error",
      "type": "object",
      "required": [
        "code",
        "level",
        "message"
      ],
      "properties": {
        "code": {"type": "string"},
        "level": {
          "type": "string",
          "enum": [
            "INFO",
            "WARNING",
            "FATAL"
          ]
        },
        "cause": {"$ref": "#/definitions/Error"},
        "message": {"type": "string"}
      }
    },
    "RequestCredentials": {
      "type": "object",
      "properties": {
        "credentialType": {
          "description": "The credentials class type to be used.",
          "type": "string",
          "enum": [
            "com.sphereon.libs.storage.client.api.model.credentials.NoCredentials",
            "com.sphereon.libs.storage.client.api.model.credentials.OAuthCredentials",
            "com.sphereon.libs.storage.client.api.model.credentials.OAuth2Credentials",
            "com.sphereon.libs.storage.client.api.model.credentials.UsernamePasswordCredentials",
            "com.sphereon.libs.storage.client.api.model.credentials.ClaimParameters"
          ]
        },
        "oauth2Credentials": {
          "description": "The oauth2Credentials for this backend.",
          "$ref": "#/definitions/OAuth2Credentials"
        },
        "oauthCredentials": {
          "description": "The usernamePasswordCredentials for this backend.",
          "$ref": "#/definitions/OAuthCredentials"
        },
        "usernamePasswordCredentials": {
          "description": "The usernamePasswordCredentials for this backend.",
          "$ref": "#/definitions/UsernamePasswordCredentials"
        }
      }
    },
    "OAuth2Credentials": {
      "type": "object",
      "properties": {
        "authenticationProvider": {
          "type": "string",
          "enum": [
            "API_SUPPLIER",
            "END_USER"
          ]
        },
        "token": {"type": "string"}
      }
    },
    "StreamLocation": {
      "description": "Location record of data stream",
      "type": "object",
      "properties": {
        "folderPath": {"type": "string"},
        "originalFileName": {"type": "string"},
        "fileName": {"type": "string"},
        "containerId": {"type": "string"}
      }
    },
    "ErrorResponse": {
      "description": "The error response",
      "type": "object",
      "properties": {"errors": {
        "type": "array",
        "items": {"$ref": "#/definitions/Error"}
      }}
    },
    "UsernamePasswordCredentials": {
      "type": "object",
      "properties": {
        "authenticationProvider": {
          "type": "string",
          "enum": [
            "API_SUPPLIER",
            "END_USER"
          ]
        },
        "password": {"type": "string"},
        "domain": {"type": "string"},
        "userName": {"type": "string"}
      }
    },
    "StreamInfo": {
      "description": "Information record from a data stream",
      "type": "object",
      "properties": {
        "streamLocation": {"$ref": "#/definitions/StreamLocation"},
        "containerName": {"type": "string"},
        "providerId": {"type": "string"},
        "streamLength": {
          "format": "int64",
          "type": "integer"
        },
        "eTag": {"type": "string"},
        "etag": {"type": "string"},
        "timeCreated": {
          "format": "date-time",
          "type": "string"
        },
        "backendLocation": {"$ref": "#/definitions/BackendLocation"},
        "contentType": {"type": "string"},
        "timeModified": {
          "format": "date-time",
          "type": "string"
        },
        "userMetadata": {
          "additionalProperties": {"type": "string"},
          "type": "object"
        }
      }
    },
    "ContainerRequest": {
      "type": "object",
      "properties": {
        "name": {"type": "string"},
        "backendId": {
          "description": "The backend in which the container will be stored or is stored.",
          "type": "string"
        }
      }
    },
    "ObjectInfoResponse": {
      "type": "object",
      "properties": {"streamInfo": {"$ref": "#/definitions/StreamInfo"}}
    },
    "ObjectResponse": {
      "type": "object",
      "properties": {
        "streamLocation": {"$ref": "#/definitions/StreamLocation"},
        "containerName": {
          "description": "The container in which the container will be stored or is stored.",
          "type": "string"
        },
        "contentLength": {
          "format": "int64",
          "type": "integer"
        },
        "state": {
          "type": "string",
          "enum": [
            "REQUEST",
            "CREATED",
            "UPDATED",
            "DELETED"
          ]
        },
        "contentType": {"type": "string"}
      }
    },
    "BackendLocation": {
      "type": "object",
      "properties": {
        "parent": {"$ref": "#/definitions/BackendLocation"},
        "metadata": {"type": "object"},
        "iso3166Codes": {
          "type": "array",
          "items": {"type": "string"}
        },
        "scope": {
          "type": "string",
          "enum": [
            "PROVIDER",
            "REGION",
            "ZONE",
            "SYSTEM",
            "NETWORK",
            "HOST"
          ]
        },
        "description": {"type": "string"},
        "id": {"type": "string"}
      }
    }
  },
  "swagger": "2.0",
  "info": {
    "license": {
      "name": "Apache License Version 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "contact": {
      "name": "Sphereon DevOps Team",
      "url": "https://sphereon.com",
      "email": "dev@sphereon.com"
    },
    "description": "Sphereon Storage APIs provide an abstraction layer for storage of containers (folders) and objects (files), using a filesystem backend or AWS-s3, Azure blobstorage or Google cloud storage backend.",
    "termsOfService": "https://sphereon.com",
    "title": "Storage",
    "version": "0.7"
  },
  "tags": [{
    "name": "Storage",
    "description": "Storage related API"
  }]
}