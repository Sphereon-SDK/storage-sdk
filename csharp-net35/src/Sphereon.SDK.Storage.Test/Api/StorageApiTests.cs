/* 
 * Storage
 *
 * Sphereon Storage APIs provide an abstraction layer for storage of containers (folders) and objects (files), using a filesystem backend or AWS-s3, Azure blobstorage or Google cloud storage backend.
 *
 * OpenAPI spec version: 0.8
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Sphereon.SDK.Storage.Client;
using Sphereon.SDK.Storage.Api;
using Sphereon.SDK.Storage.Model;

namespace Sphereon.SDK.Storage.Test
{
    /// <summary>
    ///  Class for testing StorageApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class StorageApiTests
    {
        private StorageApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new StorageApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of StorageApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' StorageApi
            //Assert.IsInstanceOfType(typeof(StorageApi), instance, "instance is a StorageApi");
        }

        
        /// <summary>
        /// Test CreateBackend
        /// </summary>
        [Test]
        public void CreateBackendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BackendRequest backendRequest = null;
            //var response = instance.CreateBackend(backendRequest);
            //Assert.IsInstanceOf<BackendResponse> (response, "response is BackendResponse");
        }
        
        /// <summary>
        /// Test CreateContainer
        /// </summary>
        [Test]
        public void CreateContainerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ContainerRequest containerRequest = null;
            //var response = instance.CreateContainer(containerRequest);
            //Assert.IsInstanceOf<ContainerResponse> (response, "response is ContainerResponse");
        }
        
        /// <summary>
        /// Test CreateStreamUsingPath
        /// </summary>
        [Test]
        public void CreateStreamUsingPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //string path = null;
            //System.IO.Stream stream = null;
            //string propagationType = null;
            //var response = instance.CreateStreamUsingPath(containerId, path, stream, propagationType);
            //Assert.IsInstanceOf<StreamResponse> (response, "response is StreamResponse");
        }
        
        /// <summary>
        /// Test DeleteBackend
        /// </summary>
        [Test]
        public void DeleteBackendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string backendId = null;
            //var response = instance.DeleteBackend(backendId);
            //Assert.IsInstanceOf<BackendResponse> (response, "response is BackendResponse");
        }
        
        /// <summary>
        /// Test DeleteContainer
        /// </summary>
        [Test]
        public void DeleteContainerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //string delete = null;
            //var response = instance.DeleteContainer(containerId, delete);
            //Assert.IsInstanceOf<ContainerResponse> (response, "response is ContainerResponse");
        }
        
        /// <summary>
        /// Test DeleteStreamUsingLocation
        /// </summary>
        [Test]
        public void DeleteStreamUsingLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //StreamLocation streamLocation = null;
            //instance.DeleteStreamUsingLocation(streamLocation);
            
        }
        
        /// <summary>
        /// Test DeleteStreamUsingPath
        /// </summary>
        [Test]
        public void DeleteStreamUsingPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //string path = null;
            //instance.DeleteStreamUsingPath(containerId, path);
            
        }
        
        /// <summary>
        /// Test GetBackendInfo
        /// </summary>
        [Test]
        public void GetBackendInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string backendId = null;
            //string credentials = null;
            //var response = instance.GetBackendInfo(backendId, credentials);
            //Assert.IsInstanceOf<BackendResponse> (response, "response is BackendResponse");
        }
        
        /// <summary>
        /// Test GetContainer
        /// </summary>
        [Test]
        public void GetContainerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //var response = instance.GetContainer(containerId);
            //Assert.IsInstanceOf<ContainerResponse> (response, "response is ContainerResponse");
        }
        
        /// <summary>
        /// Test GetStreamUsingLocation
        /// </summary>
        [Test]
        public void GetStreamUsingLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //StreamLocation streamLocation = null;
            //var response = instance.GetStreamUsingLocation(streamLocation);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test GetStreamUsingPath
        /// </summary>
        [Test]
        public void GetStreamUsingPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //string path = null;
            //var response = instance.GetStreamUsingPath(containerId, path);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test ListInfoUsingLocation
        /// </summary>
        [Test]
        public void ListInfoUsingLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //StreamLocation streamLocation = null;
            //var response = instance.ListInfoUsingLocation(streamLocation);
            //Assert.IsInstanceOf<InfoResponse> (response, "response is InfoResponse");
        }
        
        /// <summary>
        /// Test ListInfoUsingPath
        /// </summary>
        [Test]
        public void ListInfoUsingPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //string path = null;
            //var response = instance.ListInfoUsingPath(containerId, path);
            //Assert.IsInstanceOf<InfoResponse> (response, "response is InfoResponse");
        }
        
        /// <summary>
        /// Test ListInfoUsingRoot
        /// </summary>
        [Test]
        public void ListInfoUsingRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //var response = instance.ListInfoUsingRoot(containerId);
            //Assert.IsInstanceOf<InfoResponse> (response, "response is InfoResponse");
        }
        
        /// <summary>
        /// Test UpdateBackend
        /// </summary>
        [Test]
        public void UpdateBackendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string backendId = null;
            //BackendRequest backendRequest = null;
            //var response = instance.UpdateBackend(backendId, backendRequest);
            //Assert.IsInstanceOf<BackendResponse> (response, "response is BackendResponse");
        }
        
        /// <summary>
        /// Test UpdateContainer
        /// </summary>
        [Test]
        public void UpdateContainerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //ContainerRequest containerRequest = null;
            //var response = instance.UpdateContainer(containerId, containerRequest);
            //Assert.IsInstanceOf<ContainerResponse> (response, "response is ContainerResponse");
        }
        
        /// <summary>
        /// Test UpdateStreamUsingPath
        /// </summary>
        [Test]
        public void UpdateStreamUsingPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //string path = null;
            //System.IO.Stream stream = null;
            //var response = instance.UpdateStreamUsingPath(containerId, path, stream);
            //Assert.IsInstanceOf<StreamResponse> (response, "response is StreamResponse");
        }
        
    }

}
