/*
 * Storage
 * Sphereon Storage API provides an abstraction layer for storage of (virtual) folders and streams (files/contents) fully agnostic with respect to supported storage backends. This allows for easy uniform access to and manipulation of contents regardless of the content backend being used. Currently the following backends are supported: Sphereon Cloud Storage, Amazon S3, Azure Blob Storage, Google Cloud Storage or one of the Xillio supported content repositories like Documentum, Dropbox etc. For more information about this API please visit https://docs.sphereon.com/api/storage/0.8/
 *
 * OpenAPI spec version: 0.8
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.storage.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.storage.model.BearerTokenCredentials;
import com.sphereon.sdk.storage.model.Credentials;
import com.sphereon.sdk.storage.model.OAuth2ClientCredentials;
import com.sphereon.sdk.storage.model.OAuthCredentials;
import com.sphereon.sdk.storage.model.UsernamePasswordCredentials;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CredentialsRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-06T13:57:30.609+01:00")
public class CredentialsRequest {
  @SerializedName("oAuth2ClientCredentials")
  private OAuth2ClientCredentials oAuth2ClientCredentials = null;

  @SerializedName("individualCredentials")
  private Credentials individualCredentials = null;

  @SerializedName("credentials")
  private List<Credentials> credentials = null;

  @SerializedName("oAuthCredentials")
  private OAuthCredentials oAuthCredentials = null;

  @SerializedName("usernamePasswordCredentials")
  private UsernamePasswordCredentials usernamePasswordCredentials = null;

  @SerializedName("bearerTokenCredentials")
  private BearerTokenCredentials bearerTokenCredentials = null;

  public CredentialsRequest oAuth2ClientCredentials(OAuth2ClientCredentials oAuth2ClientCredentials) {
    this.oAuth2ClientCredentials = oAuth2ClientCredentials;
    return this;
  }

   /**
   * The oAuth2 Client Credentials for this backend.
   * @return oAuth2ClientCredentials
  **/
  @ApiModelProperty(value = "The oAuth2 Client Credentials for this backend.")
  public OAuth2ClientCredentials getOAuth2ClientCredentials() {
    return oAuth2ClientCredentials;
  }

  public void setOAuth2ClientCredentials(OAuth2ClientCredentials oAuth2ClientCredentials) {
    this.oAuth2ClientCredentials = oAuth2ClientCredentials;
  }

  public CredentialsRequest individualCredentials(Credentials individualCredentials) {
    this.individualCredentials = individualCredentials;
    return this;
  }

   /**
   * Get individualCredentials
   * @return individualCredentials
  **/
  @ApiModelProperty(value = "")
  public Credentials getIndividualCredentials() {
    return individualCredentials;
  }

  public void setIndividualCredentials(Credentials individualCredentials) {
    this.individualCredentials = individualCredentials;
  }

  public CredentialsRequest credentials(List<Credentials> credentials) {
    this.credentials = credentials;
    return this;
  }

  public CredentialsRequest addCredentialsItem(Credentials credentialsItem) {
    if (this.credentials == null) {
      this.credentials = new ArrayList<Credentials>();
    }
    this.credentials.add(credentialsItem);
    return this;
  }

   /**
   * Get credentials
   * @return credentials
  **/
  @ApiModelProperty(value = "")
  public List<Credentials> getCredentials() {
    return credentials;
  }

  public void setCredentials(List<Credentials> credentials) {
    this.credentials = credentials;
  }

  public CredentialsRequest oAuthCredentials(OAuthCredentials oAuthCredentials) {
    this.oAuthCredentials = oAuthCredentials;
    return this;
  }

   /**
   * The oAuth Credentials for this backend.
   * @return oAuthCredentials
  **/
  @ApiModelProperty(value = "The oAuth Credentials for this backend.")
  public OAuthCredentials getOAuthCredentials() {
    return oAuthCredentials;
  }

  public void setOAuthCredentials(OAuthCredentials oAuthCredentials) {
    this.oAuthCredentials = oAuthCredentials;
  }

  public CredentialsRequest usernamePasswordCredentials(UsernamePasswordCredentials usernamePasswordCredentials) {
    this.usernamePasswordCredentials = usernamePasswordCredentials;
    return this;
  }

   /**
   * The usernamePasswordCredentials for this backend.
   * @return usernamePasswordCredentials
  **/
  @ApiModelProperty(value = "The usernamePasswordCredentials for this backend.")
  public UsernamePasswordCredentials getUsernamePasswordCredentials() {
    return usernamePasswordCredentials;
  }

  public void setUsernamePasswordCredentials(UsernamePasswordCredentials usernamePasswordCredentials) {
    this.usernamePasswordCredentials = usernamePasswordCredentials;
  }

  public CredentialsRequest bearerTokenCredentials(BearerTokenCredentials bearerTokenCredentials) {
    this.bearerTokenCredentials = bearerTokenCredentials;
    return this;
  }

   /**
   * The bearerTokenCredentials for this backend.
   * @return bearerTokenCredentials
  **/
  @ApiModelProperty(value = "The bearerTokenCredentials for this backend.")
  public BearerTokenCredentials getBearerTokenCredentials() {
    return bearerTokenCredentials;
  }

  public void setBearerTokenCredentials(BearerTokenCredentials bearerTokenCredentials) {
    this.bearerTokenCredentials = bearerTokenCredentials;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredentialsRequest credentialsRequest = (CredentialsRequest) o;
    return Objects.equals(this.oAuth2ClientCredentials, credentialsRequest.oAuth2ClientCredentials) &&
        Objects.equals(this.individualCredentials, credentialsRequest.individualCredentials) &&
        Objects.equals(this.credentials, credentialsRequest.credentials) &&
        Objects.equals(this.oAuthCredentials, credentialsRequest.oAuthCredentials) &&
        Objects.equals(this.usernamePasswordCredentials, credentialsRequest.usernamePasswordCredentials) &&
        Objects.equals(this.bearerTokenCredentials, credentialsRequest.bearerTokenCredentials);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oAuth2ClientCredentials, individualCredentials, credentials, oAuthCredentials, usernamePasswordCredentials, bearerTokenCredentials);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredentialsRequest {\n");
    
    sb.append("    oAuth2ClientCredentials: ").append(toIndentedString(oAuth2ClientCredentials)).append("\n");
    sb.append("    individualCredentials: ").append(toIndentedString(individualCredentials)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    oAuthCredentials: ").append(toIndentedString(oAuthCredentials)).append("\n");
    sb.append("    usernamePasswordCredentials: ").append(toIndentedString(usernamePasswordCredentials)).append("\n");
    sb.append("    bearerTokenCredentials: ").append(toIndentedString(bearerTokenCredentials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

