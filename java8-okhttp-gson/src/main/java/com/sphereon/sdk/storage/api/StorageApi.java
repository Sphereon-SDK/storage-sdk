/*
 * Storage
 * Sphereon Storage APIs provide an abstraction layer for storage of containers (folders) and objects (files), using a filesystem backend or AWS-s3, Azure blobstorage or Google cloud storage backend.
 *
 * OpenAPI spec version: 0.8
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.storage.api;

import com.sphereon.sdk.storage.handler.ApiCallback;
import com.sphereon.sdk.storage.handler.ApiClient;
import com.sphereon.sdk.storage.handler.ApiException;
import com.sphereon.sdk.storage.handler.ApiResponse;
import com.sphereon.sdk.storage.handler.Configuration;
import com.sphereon.sdk.storage.handler.Pair;
import com.sphereon.sdk.storage.handler.ProgressRequestBody;
import com.sphereon.sdk.storage.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.sphereon.sdk.storage.model.BackendRequest;
import com.sphereon.sdk.storage.model.BackendResponse;
import com.sphereon.sdk.storage.model.ErrorResponse;
import com.sphereon.sdk.storage.model.ContainerResponse;
import com.sphereon.sdk.storage.model.ContainerRequest;
import com.sphereon.sdk.storage.model.StreamResponse;
import java.io.File;
import com.sphereon.sdk.storage.model.StreamLocation;
import com.sphereon.sdk.storage.model.InfoResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorageApi {
    private ApiClient apiClient;

    public StorageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createBackend */
    private com.squareup.okhttp.Call createBackendCall(BackendRequest backendRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = backendRequest;
        
        // verify the required parameter 'backendRequest' is set
        if (backendRequest == null) {
            throw new ApiException("Missing the required parameter 'backendRequest' when calling createBackend(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/backends".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new backend
     * Create a new backend
     * @param backendRequest backendRequest (required)
     * @return BackendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BackendResponse createBackend(BackendRequest backendRequest) throws ApiException {
        ApiResponse<BackendResponse> resp = createBackendWithHttpInfo(backendRequest);
        return resp.getData();
    }

    /**
     * Create a new backend
     * Create a new backend
     * @param backendRequest backendRequest (required)
     * @return ApiResponse&lt;BackendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BackendResponse> createBackendWithHttpInfo(BackendRequest backendRequest) throws ApiException {
        com.squareup.okhttp.Call call = createBackendCall(backendRequest, null, null);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new backend (asynchronously)
     * Create a new backend
     * @param backendRequest backendRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBackendAsync(BackendRequest backendRequest, final ApiCallback<BackendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBackendCall(backendRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createContainer */
    private com.squareup.okhttp.Call createContainerCall(ContainerRequest containerRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = containerRequest;
        
        // verify the required parameter 'containerRequest' is set
        if (containerRequest == null) {
            throw new ApiException("Missing the required parameter 'containerRequest' when calling createContainer(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/containers".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new container
     * Create a new container
     * @param containerRequest containerRequest (required)
     * @return ContainerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContainerResponse createContainer(ContainerRequest containerRequest) throws ApiException {
        ApiResponse<ContainerResponse> resp = createContainerWithHttpInfo(containerRequest);
        return resp.getData();
    }

    /**
     * Create a new container
     * Create a new container
     * @param containerRequest containerRequest (required)
     * @return ApiResponse&lt;ContainerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContainerResponse> createContainerWithHttpInfo(ContainerRequest containerRequest) throws ApiException {
        com.squareup.okhttp.Call call = createContainerCall(containerRequest, null, null);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new container (asynchronously)
     * Create a new container
     * @param containerRequest containerRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContainerAsync(ContainerRequest containerRequest, final ApiCallback<ContainerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContainerCall(containerRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createStreamUsingPath */
    private com.squareup.okhttp.Call createStreamUsingPathCall(String containerId, String path, File stream, String propagationType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling createStreamUsingPath(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling createStreamUsingPath(Async)");
        }
        
        // verify the required parameter 'stream' is set
        if (stream == null) {
            throw new ApiException("Missing the required parameter 'stream' when calling createStreamUsingPath(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/streams/path/{containerId}/{path}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()))
        .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (propagationType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "propagationType", propagationType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (stream != null)
        localVarFormParams.put("stream", stream);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new stream within a container
     * Create a new stream within a container. Query parameter creationMode accepts values NEW_ONLY to create a new stream, REQUIRE_EXISTING to update an stream and ALLOW_EXISTING to create a new stream or overwrite an existing stream.
     * @param containerId containerId (required)
     * @param path path (required)
     * @param stream stream (required)
     * @param propagationType propagationType (optional)
     * @return StreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResponse createStreamUsingPath(String containerId, String path, File stream, String propagationType) throws ApiException {
        ApiResponse<StreamResponse> resp = createStreamUsingPathWithHttpInfo(containerId, path, stream, propagationType);
        return resp.getData();
    }

    /**
     * Create a new stream within a container
     * Create a new stream within a container. Query parameter creationMode accepts values NEW_ONLY to create a new stream, REQUIRE_EXISTING to update an stream and ALLOW_EXISTING to create a new stream or overwrite an existing stream.
     * @param containerId containerId (required)
     * @param path path (required)
     * @param stream stream (required)
     * @param propagationType propagationType (optional)
     * @return ApiResponse&lt;StreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResponse> createStreamUsingPathWithHttpInfo(String containerId, String path, File stream, String propagationType) throws ApiException {
        com.squareup.okhttp.Call call = createStreamUsingPathCall(containerId, path, stream, propagationType, null, null);
        Type localVarReturnType = new TypeToken<StreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new stream within a container (asynchronously)
     * Create a new stream within a container. Query parameter creationMode accepts values NEW_ONLY to create a new stream, REQUIRE_EXISTING to update an stream and ALLOW_EXISTING to create a new stream or overwrite an existing stream.
     * @param containerId containerId (required)
     * @param path path (required)
     * @param stream stream (required)
     * @param propagationType propagationType (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createStreamUsingPathAsync(String containerId, String path, File stream, String propagationType, final ApiCallback<StreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createStreamUsingPathCall(containerId, path, stream, propagationType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteBackend */
    private com.squareup.okhttp.Call deleteBackendCall(String backendId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'backendId' is set
        if (backendId == null) {
            throw new ApiException("Missing the required parameter 'backendId' when calling deleteBackend(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/backends/{backendId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "backendId" + "\\}", apiClient.escapeString(backendId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete a backend
     * Delete a backend
     * @param backendId backendId (required)
     * @return BackendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BackendResponse deleteBackend(String backendId) throws ApiException {
        ApiResponse<BackendResponse> resp = deleteBackendWithHttpInfo(backendId);
        return resp.getData();
    }

    /**
     * Delete a backend
     * Delete a backend
     * @param backendId backendId (required)
     * @return ApiResponse&lt;BackendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BackendResponse> deleteBackendWithHttpInfo(String backendId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBackendCall(backendId, null, null);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a backend (asynchronously)
     * Delete a backend
     * @param backendId backendId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBackendAsync(String backendId, final ApiCallback<BackendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBackendCall(backendId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteContainer */
    private com.squareup.okhttp.Call deleteContainerCall(String containerId, String delete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling deleteContainer(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/containers/{containerId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (delete != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "delete", delete));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete an existing container
     * Delete an existing container including the stored streams if indicated.
     * @param containerId containerId (required)
     * @param delete delete (optional)
     * @return ContainerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContainerResponse deleteContainer(String containerId, String delete) throws ApiException {
        ApiResponse<ContainerResponse> resp = deleteContainerWithHttpInfo(containerId, delete);
        return resp.getData();
    }

    /**
     * Delete an existing container
     * Delete an existing container including the stored streams if indicated.
     * @param containerId containerId (required)
     * @param delete delete (optional)
     * @return ApiResponse&lt;ContainerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContainerResponse> deleteContainerWithHttpInfo(String containerId, String delete) throws ApiException {
        com.squareup.okhttp.Call call = deleteContainerCall(containerId, delete, null, null);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an existing container (asynchronously)
     * Delete an existing container including the stored streams if indicated.
     * @param containerId containerId (required)
     * @param delete delete (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContainerAsync(String containerId, String delete, final ApiCallback<ContainerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContainerCall(containerId, delete, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteStreamUsingLocation */
    private com.squareup.okhttp.Call deleteStreamUsingLocationCall(StreamLocation streamLocation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = streamLocation;
        
        // verify the required parameter 'streamLocation' is set
        if (streamLocation == null) {
            throw new ApiException("Missing the required parameter 'streamLocation' when calling deleteStreamUsingLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/streams/location".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete an existing stream from a container by stream location.
     * Delete an existing stream from a container by stream location. There is no request nor response body for a delete request.
     * @param streamLocation streamLocation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStreamUsingLocation(StreamLocation streamLocation) throws ApiException {
        deleteStreamUsingLocationWithHttpInfo(streamLocation);
    }

    /**
     * Delete an existing stream from a container by stream location.
     * Delete an existing stream from a container by stream location. There is no request nor response body for a delete request.
     * @param streamLocation streamLocation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStreamUsingLocationWithHttpInfo(StreamLocation streamLocation) throws ApiException {
        com.squareup.okhttp.Call call = deleteStreamUsingLocationCall(streamLocation, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an existing stream from a container by stream location. (asynchronously)
     * Delete an existing stream from a container by stream location. There is no request nor response body for a delete request.
     * @param streamLocation streamLocation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStreamUsingLocationAsync(StreamLocation streamLocation, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStreamUsingLocationCall(streamLocation, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteStreamUsingPath */
    private com.squareup.okhttp.Call deleteStreamUsingPathCall(String containerId, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling deleteStreamUsingPath(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling deleteStreamUsingPath(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/streams/path/{containerId}/{path}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()))
        .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete an existing stream from a container.
     * Delete an existing stream from a container. There is no request nor response body for a delete request.
     * @param containerId containerId (required)
     * @param path path (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStreamUsingPath(String containerId, String path) throws ApiException {
        deleteStreamUsingPathWithHttpInfo(containerId, path);
    }

    /**
     * Delete an existing stream from a container.
     * Delete an existing stream from a container. There is no request nor response body for a delete request.
     * @param containerId containerId (required)
     * @param path path (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStreamUsingPathWithHttpInfo(String containerId, String path) throws ApiException {
        com.squareup.okhttp.Call call = deleteStreamUsingPathCall(containerId, path, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an existing stream from a container. (asynchronously)
     * Delete an existing stream from a container. There is no request nor response body for a delete request.
     * @param containerId containerId (required)
     * @param path path (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStreamUsingPathAsync(String containerId, String path, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStreamUsingPathCall(containerId, path, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getBackendInfo */
    private com.squareup.okhttp.Call getBackendInfoCall(String backendId, String credentials, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'backendId' is set
        if (backendId == null) {
            throw new ApiException("Missing the required parameter 'backendId' when calling getBackendInfo(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/backends/{backendId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "backendId" + "\\}", apiClient.escapeString(backendId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (credentials != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "credentials", credentials));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get backend information
     * Get information on a backend
     * @param backendId backendId (required)
     * @param credentials credentials (optional)
     * @return BackendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BackendResponse getBackendInfo(String backendId, String credentials) throws ApiException {
        ApiResponse<BackendResponse> resp = getBackendInfoWithHttpInfo(backendId, credentials);
        return resp.getData();
    }

    /**
     * Get backend information
     * Get information on a backend
     * @param backendId backendId (required)
     * @param credentials credentials (optional)
     * @return ApiResponse&lt;BackendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BackendResponse> getBackendInfoWithHttpInfo(String backendId, String credentials) throws ApiException {
        com.squareup.okhttp.Call call = getBackendInfoCall(backendId, credentials, null, null);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get backend information (asynchronously)
     * Get information on a backend
     * @param backendId backendId (required)
     * @param credentials credentials (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBackendInfoAsync(String backendId, String credentials, final ApiCallback<BackendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBackendInfoCall(backendId, credentials, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getContainer */
    private com.squareup.okhttp.Call getContainerCall(String containerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling getContainer(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/containers/{containerId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get container information
     * Get information on a container
     * @param containerId containerId (required)
     * @return ContainerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContainerResponse getContainer(String containerId) throws ApiException {
        ApiResponse<ContainerResponse> resp = getContainerWithHttpInfo(containerId);
        return resp.getData();
    }

    /**
     * Get container information
     * Get information on a container
     * @param containerId containerId (required)
     * @return ApiResponse&lt;ContainerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContainerResponse> getContainerWithHttpInfo(String containerId) throws ApiException {
        com.squareup.okhttp.Call call = getContainerCall(containerId, null, null);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get container information (asynchronously)
     * Get information on a container
     * @param containerId containerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContainerAsync(String containerId, final ApiCallback<ContainerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContainerCall(containerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStreamUsingLocation */
    private com.squareup.okhttp.Call getStreamUsingLocationCall(StreamLocation streamLocation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = streamLocation;
        
        // verify the required parameter 'streamLocation' is set
        if (streamLocation == null) {
            throw new ApiException("Missing the required parameter 'streamLocation' when calling getStreamUsingLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/streams/location".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get an existing stream from a container by stream location
     * Get an existing stream from a container by stream location
     * @param streamLocation streamLocation (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] getStreamUsingLocation(StreamLocation streamLocation) throws ApiException {
        ApiResponse<byte[]> resp = getStreamUsingLocationWithHttpInfo(streamLocation);
        return resp.getData();
    }

    /**
     * Get an existing stream from a container by stream location
     * Get an existing stream from a container by stream location
     * @param streamLocation streamLocation (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> getStreamUsingLocationWithHttpInfo(StreamLocation streamLocation) throws ApiException {
        com.squareup.okhttp.Call call = getStreamUsingLocationCall(streamLocation, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an existing stream from a container by stream location (asynchronously)
     * Get an existing stream from a container by stream location
     * @param streamLocation streamLocation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStreamUsingLocationAsync(StreamLocation streamLocation, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStreamUsingLocationCall(streamLocation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getStreamUsingPath */
    private com.squareup.okhttp.Call getStreamUsingPathCall(String containerId, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling getStreamUsingPath(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getStreamUsingPath(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/streams/path/{containerId}/{path}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()))
        .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get an stream from a container
     * Get an existing stream from a container
     * @param containerId containerId (required)
     * @param path path (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] getStreamUsingPath(String containerId, String path) throws ApiException {
        ApiResponse<byte[]> resp = getStreamUsingPathWithHttpInfo(containerId, path);
        return resp.getData();
    }

    /**
     * Get an stream from a container
     * Get an existing stream from a container
     * @param containerId containerId (required)
     * @param path path (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> getStreamUsingPathWithHttpInfo(String containerId, String path) throws ApiException {
        com.squareup.okhttp.Call call = getStreamUsingPathCall(containerId, path, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an stream from a container (asynchronously)
     * Get an existing stream from a container
     * @param containerId containerId (required)
     * @param path path (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStreamUsingPathAsync(String containerId, String path, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStreamUsingPathCall(containerId, path, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listInfoUsingLocation */
    private com.squareup.okhttp.Call listInfoUsingLocationCall(StreamLocation streamLocation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = streamLocation;
        
        // verify the required parameter 'streamLocation' is set
        if (streamLocation == null) {
            throw new ApiException("Missing the required parameter 'streamLocation' when calling listInfoUsingLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/info/location".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List streams in path by stream location
     * Returns stream informations on the given stream location. When the path points to a file (and if the file exists,) a StreamInfo record of that single file will be returned. When the path points to a folder, the StreamInfo records of all files in that folder will be returned.
     * @param streamLocation streamLocation (required)
     * @return InfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfoResponse listInfoUsingLocation(StreamLocation streamLocation) throws ApiException {
        ApiResponse<InfoResponse> resp = listInfoUsingLocationWithHttpInfo(streamLocation);
        return resp.getData();
    }

    /**
     * List streams in path by stream location
     * Returns stream informations on the given stream location. When the path points to a file (and if the file exists,) a StreamInfo record of that single file will be returned. When the path points to a folder, the StreamInfo records of all files in that folder will be returned.
     * @param streamLocation streamLocation (required)
     * @return ApiResponse&lt;InfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfoResponse> listInfoUsingLocationWithHttpInfo(StreamLocation streamLocation) throws ApiException {
        com.squareup.okhttp.Call call = listInfoUsingLocationCall(streamLocation, null, null);
        Type localVarReturnType = new TypeToken<InfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List streams in path by stream location (asynchronously)
     * Returns stream informations on the given stream location. When the path points to a file (and if the file exists,) a StreamInfo record of that single file will be returned. When the path points to a folder, the StreamInfo records of all files in that folder will be returned.
     * @param streamLocation streamLocation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listInfoUsingLocationAsync(StreamLocation streamLocation, final ApiCallback<InfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listInfoUsingLocationCall(streamLocation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listInfoUsingPath */
    private com.squareup.okhttp.Call listInfoUsingPathCall(String containerId, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling listInfoUsingPath(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling listInfoUsingPath(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/info/path/{containerId}/{path}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()))
        .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List streams in path
     * Returns streams information on the given path. When the path points to a file (and if the file exists,) a StreamInfo record of that single file will be returned. When the path points to a folder, the StreamInfo records of all files in that folder will be returned.
     * @param containerId containerId (required)
     * @param path path (required)
     * @return InfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfoResponse listInfoUsingPath(String containerId, String path) throws ApiException {
        ApiResponse<InfoResponse> resp = listInfoUsingPathWithHttpInfo(containerId, path);
        return resp.getData();
    }

    /**
     * List streams in path
     * Returns streams information on the given path. When the path points to a file (and if the file exists,) a StreamInfo record of that single file will be returned. When the path points to a folder, the StreamInfo records of all files in that folder will be returned.
     * @param containerId containerId (required)
     * @param path path (required)
     * @return ApiResponse&lt;InfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfoResponse> listInfoUsingPathWithHttpInfo(String containerId, String path) throws ApiException {
        com.squareup.okhttp.Call call = listInfoUsingPathCall(containerId, path, null, null);
        Type localVarReturnType = new TypeToken<InfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List streams in path (asynchronously)
     * Returns streams information on the given path. When the path points to a file (and if the file exists,) a StreamInfo record of that single file will be returned. When the path points to a folder, the StreamInfo records of all files in that folder will be returned.
     * @param containerId containerId (required)
     * @param path path (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listInfoUsingPathAsync(String containerId, String path, final ApiCallback<InfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listInfoUsingPathCall(containerId, path, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listInfoUsingRoot */
    private com.squareup.okhttp.Call listInfoUsingRootCall(String containerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling listInfoUsingRoot(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/info/path/{containerId}/".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List streams in root
     * Returns strean information from the root. When the path points to a file (and if the file exists,) a StreamInfo record of that single file will be returned. When the path points to a folder, the StreamInfo records of all files in that folder will be returned.
     * @param containerId containerId (required)
     * @return InfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfoResponse listInfoUsingRoot(String containerId) throws ApiException {
        ApiResponse<InfoResponse> resp = listInfoUsingRootWithHttpInfo(containerId);
        return resp.getData();
    }

    /**
     * List streams in root
     * Returns strean information from the root. When the path points to a file (and if the file exists,) a StreamInfo record of that single file will be returned. When the path points to a folder, the StreamInfo records of all files in that folder will be returned.
     * @param containerId containerId (required)
     * @return ApiResponse&lt;InfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfoResponse> listInfoUsingRootWithHttpInfo(String containerId) throws ApiException {
        com.squareup.okhttp.Call call = listInfoUsingRootCall(containerId, null, null);
        Type localVarReturnType = new TypeToken<InfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List streams in root (asynchronously)
     * Returns strean information from the root. When the path points to a file (and if the file exists,) a StreamInfo record of that single file will be returned. When the path points to a folder, the StreamInfo records of all files in that folder will be returned.
     * @param containerId containerId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listInfoUsingRootAsync(String containerId, final ApiCallback<InfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listInfoUsingRootCall(containerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateBackend */
    private com.squareup.okhttp.Call updateBackendCall(String backendId, BackendRequest backendRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = backendRequest;
        
        // verify the required parameter 'backendId' is set
        if (backendId == null) {
            throw new ApiException("Missing the required parameter 'backendId' when calling updateBackend(Async)");
        }
        
        // verify the required parameter 'backendRequest' is set
        if (backendRequest == null) {
            throw new ApiException("Missing the required parameter 'backendRequest' when calling updateBackend(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/backends/{backendId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "backendId" + "\\}", apiClient.escapeString(backendId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update a backend
     * Update a backend
     * @param backendId backendId (required)
     * @param backendRequest backendRequest (required)
     * @return BackendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BackendResponse updateBackend(String backendId, BackendRequest backendRequest) throws ApiException {
        ApiResponse<BackendResponse> resp = updateBackendWithHttpInfo(backendId, backendRequest);
        return resp.getData();
    }

    /**
     * Update a backend
     * Update a backend
     * @param backendId backendId (required)
     * @param backendRequest backendRequest (required)
     * @return ApiResponse&lt;BackendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BackendResponse> updateBackendWithHttpInfo(String backendId, BackendRequest backendRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateBackendCall(backendId, backendRequest, null, null);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a backend (asynchronously)
     * Update a backend
     * @param backendId backendId (required)
     * @param backendRequest backendRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBackendAsync(String backendId, BackendRequest backendRequest, final ApiCallback<BackendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBackendCall(backendId, backendRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateContainer */
    private com.squareup.okhttp.Call updateContainerCall(String containerId, ContainerRequest containerRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = containerRequest;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling updateContainer(Async)");
        }
        
        // verify the required parameter 'containerRequest' is set
        if (containerRequest == null) {
            throw new ApiException("Missing the required parameter 'containerRequest' when calling updateContainer(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/containers/{containerId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update a container
     * Update an existing container with new container settings
     * @param containerId containerId (required)
     * @param containerRequest containerRequest (required)
     * @return ContainerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContainerResponse updateContainer(String containerId, ContainerRequest containerRequest) throws ApiException {
        ApiResponse<ContainerResponse> resp = updateContainerWithHttpInfo(containerId, containerRequest);
        return resp.getData();
    }

    /**
     * Update a container
     * Update an existing container with new container settings
     * @param containerId containerId (required)
     * @param containerRequest containerRequest (required)
     * @return ApiResponse&lt;ContainerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContainerResponse> updateContainerWithHttpInfo(String containerId, ContainerRequest containerRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateContainerCall(containerId, containerRequest, null, null);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a container (asynchronously)
     * Update an existing container with new container settings
     * @param containerId containerId (required)
     * @param containerRequest containerRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContainerAsync(String containerId, ContainerRequest containerRequest, final ApiCallback<ContainerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContainerCall(containerId, containerRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContainerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateStreamUsingPath */
    private com.squareup.okhttp.Call updateStreamUsingPathCall(String containerId, String path, File stream, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException("Missing the required parameter 'containerId' when calling updateStreamUsingPath(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling updateStreamUsingPath(Async)");
        }
        
        // verify the required parameter 'stream' is set
        if (stream == null) {
            throw new ApiException("Missing the required parameter 'stream' when calling updateStreamUsingPath(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/streams/path/{containerId}/{path}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "containerId" + "\\}", apiClient.escapeString(containerId.toString()))
        .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (stream != null)
        localVarFormParams.put("stream", stream);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update stream within a container
     * Update stream within a container.
     * @param containerId containerId (required)
     * @param path path (required)
     * @param stream stream (required)
     * @return StreamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamResponse updateStreamUsingPath(String containerId, String path, File stream) throws ApiException {
        ApiResponse<StreamResponse> resp = updateStreamUsingPathWithHttpInfo(containerId, path, stream);
        return resp.getData();
    }

    /**
     * Update stream within a container
     * Update stream within a container.
     * @param containerId containerId (required)
     * @param path path (required)
     * @param stream stream (required)
     * @return ApiResponse&lt;StreamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamResponse> updateStreamUsingPathWithHttpInfo(String containerId, String path, File stream) throws ApiException {
        com.squareup.okhttp.Call call = updateStreamUsingPathCall(containerId, path, stream, null, null);
        Type localVarReturnType = new TypeToken<StreamResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update stream within a container (asynchronously)
     * Update stream within a container.
     * @param containerId containerId (required)
     * @param path path (required)
     * @param stream stream (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStreamUsingPathAsync(String containerId, String path, File stream, final ApiCallback<StreamResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStreamUsingPathCall(containerId, path, stream, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
