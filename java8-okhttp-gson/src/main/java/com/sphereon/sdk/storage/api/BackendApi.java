/*
 * Storage
 * Sphereon Storage API provides an abstraction layer for storage of (virtual) folders and streams (files/contents) fully agnostic with respect to supported storage backends. This allows for easy uniform access to and manipulation of contents regardless of the content backend being used. Currently the following backends are supported: Sphereon Cloud Storage, Amazon S3, Azure Blob Storage, Google Cloud Storage or one of the Xillio supported content repositories like Documentum, Dropbox etc. For more information about this API please visit https://docs.sphereon.com/api/storage/0.8/
 *
 * OpenAPI spec version: 0.8
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.storage.api;

import com.sphereon.sdk.storage.handler.ApiCallback;
import com.sphereon.sdk.storage.handler.ApiClient;
import com.sphereon.sdk.storage.handler.ApiException;
import com.sphereon.sdk.storage.handler.ApiResponse;
import com.sphereon.sdk.storage.handler.Configuration;
import com.sphereon.sdk.storage.handler.Pair;
import com.sphereon.sdk.storage.handler.ProgressRequestBody;
import com.sphereon.sdk.storage.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sphereon.sdk.storage.model.BackendRequest;
import com.sphereon.sdk.storage.model.BackendResponse;
import com.sphereon.sdk.storage.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BackendApi {
    private ApiClient apiClient;

    public BackendApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BackendApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBackend
     * @param backendRequest backendRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBackendCall(BackendRequest backendRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = backendRequest;
        
        // create path and map variables
        String localVarPath = "/backends";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBackendValidateBeforeCall(BackendRequest backendRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'backendRequest' is set
        if (backendRequest == null) {
            throw new ApiException("Missing the required parameter 'backendRequest' when calling createBackend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createBackendCall(backendRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new backend
     * Create a new backend
     * @param backendRequest backendRequest (required)
     * @return BackendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BackendResponse createBackend(BackendRequest backendRequest) throws ApiException {
        ApiResponse<BackendResponse> resp = createBackendWithHttpInfo(backendRequest);
        return resp.getData();
    }

    /**
     * Create a new backend
     * Create a new backend
     * @param backendRequest backendRequest (required)
     * @return ApiResponse&lt;BackendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BackendResponse> createBackendWithHttpInfo(BackendRequest backendRequest) throws ApiException {
        com.squareup.okhttp.Call call = createBackendValidateBeforeCall(backendRequest, null, null);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new backend (asynchronously)
     * Create a new backend
     * @param backendRequest backendRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBackendAsync(BackendRequest backendRequest, final ApiCallback<BackendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBackendValidateBeforeCall(backendRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBackend
     * @param backendId backendId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBackendCall(String backendId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/backends/{backendId}"
            .replaceAll("\\{" + "backendId" + "\\}", apiClient.escapeString(backendId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBackendValidateBeforeCall(String backendId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'backendId' is set
        if (backendId == null) {
            throw new ApiException("Missing the required parameter 'backendId' when calling deleteBackend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteBackendCall(backendId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a backend
     * Delete an existing backend. Please note that you can delete a backend both by it&#39;s ID, which is globally unique among tenants and applications, as well as by name, which is unique within an application of a tenant
     * @param backendId backendId (required)
     * @return BackendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BackendResponse deleteBackend(String backendId) throws ApiException {
        ApiResponse<BackendResponse> resp = deleteBackendWithHttpInfo(backendId);
        return resp.getData();
    }

    /**
     * Delete a backend
     * Delete an existing backend. Please note that you can delete a backend both by it&#39;s ID, which is globally unique among tenants and applications, as well as by name, which is unique within an application of a tenant
     * @param backendId backendId (required)
     * @return ApiResponse&lt;BackendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BackendResponse> deleteBackendWithHttpInfo(String backendId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBackendValidateBeforeCall(backendId, null, null);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a backend (asynchronously)
     * Delete an existing backend. Please note that you can delete a backend both by it&#39;s ID, which is globally unique among tenants and applications, as well as by name, which is unique within an application of a tenant
     * @param backendId backendId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBackendAsync(String backendId, final ApiCallback<BackendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBackendValidateBeforeCall(backendId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBackend
     * @param backendId backendId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBackendCall(String backendId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/backends/{backendId}"
            .replaceAll("\\{" + "backendId" + "\\}", apiClient.escapeString(backendId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBackendValidateBeforeCall(String backendId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'backendId' is set
        if (backendId == null) {
            throw new ApiException("Missing the required parameter 'backendId' when calling getBackend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getBackendCall(backendId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get backend
     * Get an existing backend. Please note that you can retrieve a backend both by it&#39;s ID, which is globally unique among tenants and applications, as well as by name, which is unique within an application of a tenant
     * @param backendId backendId (required)
     * @return BackendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BackendResponse getBackend(String backendId) throws ApiException {
        ApiResponse<BackendResponse> resp = getBackendWithHttpInfo(backendId);
        return resp.getData();
    }

    /**
     * Get backend
     * Get an existing backend. Please note that you can retrieve a backend both by it&#39;s ID, which is globally unique among tenants and applications, as well as by name, which is unique within an application of a tenant
     * @param backendId backendId (required)
     * @return ApiResponse&lt;BackendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BackendResponse> getBackendWithHttpInfo(String backendId) throws ApiException {
        com.squareup.okhttp.Call call = getBackendValidateBeforeCall(backendId, null, null);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get backend (asynchronously)
     * Get an existing backend. Please note that you can retrieve a backend both by it&#39;s ID, which is globally unique among tenants and applications, as well as by name, which is unique within an application of a tenant
     * @param backendId backendId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBackendAsync(String backendId, final ApiCallback<BackendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBackendValidateBeforeCall(backendId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBackend
     * @param backendId backendId (required)
     * @param backendRequest backendRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBackendCall(String backendId, BackendRequest backendRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = backendRequest;
        
        // create path and map variables
        String localVarPath = "/backends/{backendId}"
            .replaceAll("\\{" + "backendId" + "\\}", apiClient.escapeString(backendId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBackendValidateBeforeCall(String backendId, BackendRequest backendRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'backendId' is set
        if (backendId == null) {
            throw new ApiException("Missing the required parameter 'backendId' when calling updateBackend(Async)");
        }
        
        // verify the required parameter 'backendRequest' is set
        if (backendRequest == null) {
            throw new ApiException("Missing the required parameter 'backendRequest' when calling updateBackend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateBackendCall(backendId, backendRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update backend
     * Update backend with new information
     * @param backendId backendId (required)
     * @param backendRequest backendRequest (required)
     * @return BackendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BackendResponse updateBackend(String backendId, BackendRequest backendRequest) throws ApiException {
        ApiResponse<BackendResponse> resp = updateBackendWithHttpInfo(backendId, backendRequest);
        return resp.getData();
    }

    /**
     * Update backend
     * Update backend with new information
     * @param backendId backendId (required)
     * @param backendRequest backendRequest (required)
     * @return ApiResponse&lt;BackendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BackendResponse> updateBackendWithHttpInfo(String backendId, BackendRequest backendRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateBackendValidateBeforeCall(backendId, backendRequest, null, null);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update backend (asynchronously)
     * Update backend with new information
     * @param backendId backendId (required)
     * @param backendRequest backendRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBackendAsync(String backendId, BackendRequest backendRequest, final ApiCallback<BackendResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBackendValidateBeforeCall(backendId, backendRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BackendResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
