/*
 * Storage
 * Sphereon Storage API provides an abstraction layer for storage of (virtual) folders and streams (files/contents) fully agnostic with respect to supported storage backends. This allows for easy uniform access to and manipulation of contents regardless of the content backend being used. Currently the following backends are supported: Sphereon Cloud Storage, Amazon S3, Azure Blob Storage, Google Cloud Storage or one of the Xillio supported content repositories like Documentum, Dropbox etc. For more information about this API please visit https://docs.sphereon.com/api/storage/0.8/
 *
 * OpenAPI spec version: 0.8
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.storage.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.storage.model.StreamInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * InfoResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-06T13:57:30.609+01:00")
public class InfoResponse {
  @SerializedName("streamInfos")
  private List<StreamInfo> streamInfos = null;

  public InfoResponse streamInfos(List<StreamInfo> streamInfos) {
    this.streamInfos = streamInfos;
    return this;
  }

  public InfoResponse addStreamInfosItem(StreamInfo streamInfosItem) {
    if (this.streamInfos == null) {
      this.streamInfos = new ArrayList<StreamInfo>();
    }
    this.streamInfos.add(streamInfosItem);
    return this;
  }

   /**
   * Get streamInfos
   * @return streamInfos
  **/
  @ApiModelProperty(value = "")
  public List<StreamInfo> getStreamInfos() {
    return streamInfos;
  }

  public void setStreamInfos(List<StreamInfo> streamInfos) {
    this.streamInfos = streamInfos;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfoResponse infoResponse = (InfoResponse) o;
    return Objects.equals(this.streamInfos, infoResponse.streamInfos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamInfos);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfoResponse {\n");
    
    sb.append("    streamInfos: ").append(toIndentedString(streamInfos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

