/*
 * Storage
 * Sphereon Storage API provides an abstraction layer for storage of (virtual) folders and streams (files/contents) fully agnostic with respect to supported storage backends. This allows for easy uniform access to and manipulation of contents regardless of the content backend being used. Currently the following backends are supported: Sphereon Cloud Storage, Amazon S3, Azure Blob Storage, Google Cloud Storage or one of the Xillio supported content repositories like Documentum, Dropbox etc. For more information about this API please visit https://docs.sphereon.com/api/storage/0.8/
 *
 * OpenAPI spec version: 0.8
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.storage.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.storage.model.StreamLocation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Information record from a data stream
 */
@ApiModel(description = "Information record from a data stream")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-06T13:57:30.609+01:00")
public class StreamInfo {
  @SerializedName("streamLocation")
  private StreamLocation streamLocation = null;

  @SerializedName("containerName")
  private String containerName = null;

  @SerializedName("providerId")
  private String providerId = null;

  @SerializedName("streamLength")
  private Long streamLength = null;

  @SerializedName("etag")
  private String etag = null;

  @SerializedName("timeCreated")
  private OffsetDateTime timeCreated = null;

  /**
   * Gets or Sets region
   */
  @JsonAdapter(RegionEnum.Adapter.class)
  public enum RegionEnum {
    AMAZON_S3_AP_NORTHEAST_1("AMAZON_S3_AP_NORTHEAST_1"),
    
    AMAZON_S3_AP_NORTHEAST_2("AMAZON_S3_AP_NORTHEAST_2"),
    
    AMAZON_S3_AP_SOUTH_1("AMAZON_S3_AP_SOUTH_1"),
    
    AMAZON_S3_AP_SOUTHEAST_1("AMAZON_S3_AP_SOUTHEAST_1"),
    
    AMAZON_S3_AP_SOUTHEAST_2("AMAZON_S3_AP_SOUTHEAST_2"),
    
    AMAZON_S3_CA_CENTRAL_1("AMAZON_S3_CA_CENTRAL_1"),
    
    AMAZON_S3_CN_NORTH_1("AMAZON_S3_CN_NORTH_1"),
    
    AMAZON_S3_EU_CENTRAL_1("AMAZON_S3_EU_CENTRAL_1"),
    
    AMAZON_S3_EU_WEST_1("AMAZON_S3_EU_WEST_1"),
    
    AMAZON_S3_EU_WEST_2("AMAZON_S3_EU_WEST_2"),
    
    AMAZON_S3_SA_EAST_1("AMAZON_S3_SA_EAST_1"),
    
    AMAZON_S3_US_EAST_1("AMAZON_S3_US_EAST_1"),
    
    AMAZON_S3_US_EAST_2("AMAZON_S3_US_EAST_2"),
    
    AMAZON_S3_US_STANDARD("AMAZON_S3_US_STANDARD"),
    
    AMAZON_S3_US_WEST_1("AMAZON_S3_US_WEST_1"),
    
    AMAZON_S3_US_WEST_2("AMAZON_S3_US_WEST_2"),
    
    GOOGLE_STORAGE_ASIA("GOOGLE_STORAGE_ASIA"),
    
    GOOGLE_STORAGE_ASIA_EAST1("GOOGLE_STORAGE_ASIA_EAST1"),
    
    GOOGLE_STORAGE_EU("GOOGLE_STORAGE_EU"),
    
    GOOGLE_STORAGE_US("GOOGLE_STORAGE_US"),
    
    GOOGLE_STORAGE_US_CENTRAL1("GOOGLE_STORAGE_US_CENTRAL1"),
    
    GOOGLE_STORAGE_US_CENTRAL2("GOOGLE_STORAGE_US_CENTRAL2"),
    
    GOOGLE_STORAGE_US_EAST1("GOOGLE_STORAGE_US_EAST1"),
    
    GOOGLE_STORAGE_US_EAST2("GOOGLE_STORAGE_US_EAST2"),
    
    GOOGLE_STORAGE_US_EAST3("GOOGLE_STORAGE_US_EAST3"),
    
    GOOGLE_STORAGE_US_WEST1("GOOGLE_STORAGE_US_WEST1");

    private String value;

    RegionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegionEnum fromValue(String text) {
      for (RegionEnum b : RegionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RegionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RegionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("region")
  private RegionEnum region = null;

  @SerializedName("contentType")
  private String contentType = null;

  @SerializedName("timeModified")
  private OffsetDateTime timeModified = null;

  @SerializedName("userMetadata")
  private Map<String, String> userMetadata = null;

  public StreamInfo streamLocation(StreamLocation streamLocation) {
    this.streamLocation = streamLocation;
    return this;
  }

   /**
   * Get streamLocation
   * @return streamLocation
  **/
  @ApiModelProperty(value = "")
  public StreamLocation getStreamLocation() {
    return streamLocation;
  }

  public void setStreamLocation(StreamLocation streamLocation) {
    this.streamLocation = streamLocation;
  }

  public StreamInfo containerName(String containerName) {
    this.containerName = containerName;
    return this;
  }

   /**
   * Get containerName
   * @return containerName
  **/
  @ApiModelProperty(value = "")
  public String getContainerName() {
    return containerName;
  }

  public void setContainerName(String containerName) {
    this.containerName = containerName;
  }

  public StreamInfo providerId(String providerId) {
    this.providerId = providerId;
    return this;
  }

   /**
   * Get providerId
   * @return providerId
  **/
  @ApiModelProperty(value = "")
  public String getProviderId() {
    return providerId;
  }

  public void setProviderId(String providerId) {
    this.providerId = providerId;
  }

  public StreamInfo streamLength(Long streamLength) {
    this.streamLength = streamLength;
    return this;
  }

   /**
   * Get streamLength
   * @return streamLength
  **/
  @ApiModelProperty(value = "")
  public Long getStreamLength() {
    return streamLength;
  }

  public void setStreamLength(Long streamLength) {
    this.streamLength = streamLength;
  }

  public StreamInfo etag(String etag) {
    this.etag = etag;
    return this;
  }

   /**
   * Get etag
   * @return etag
  **/
  @ApiModelProperty(value = "")
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }

  public StreamInfo timeCreated(OffsetDateTime timeCreated) {
    this.timeCreated = timeCreated;
    return this;
  }

   /**
   * Get timeCreated
   * @return timeCreated
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getTimeCreated() {
    return timeCreated;
  }

  public void setTimeCreated(OffsetDateTime timeCreated) {
    this.timeCreated = timeCreated;
  }

  public StreamInfo region(RegionEnum region) {
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @ApiModelProperty(value = "")
  public RegionEnum getRegion() {
    return region;
  }

  public void setRegion(RegionEnum region) {
    this.region = region;
  }

  public StreamInfo contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * Get contentType
   * @return contentType
  **/
  @ApiModelProperty(value = "")
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }

  public StreamInfo timeModified(OffsetDateTime timeModified) {
    this.timeModified = timeModified;
    return this;
  }

   /**
   * Get timeModified
   * @return timeModified
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getTimeModified() {
    return timeModified;
  }

  public void setTimeModified(OffsetDateTime timeModified) {
    this.timeModified = timeModified;
  }

  public StreamInfo userMetadata(Map<String, String> userMetadata) {
    this.userMetadata = userMetadata;
    return this;
  }

  public StreamInfo putUserMetadataItem(String key, String userMetadataItem) {
    if (this.userMetadata == null) {
      this.userMetadata = new HashMap<String, String>();
    }
    this.userMetadata.put(key, userMetadataItem);
    return this;
  }

   /**
   * Get userMetadata
   * @return userMetadata
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getUserMetadata() {
    return userMetadata;
  }

  public void setUserMetadata(Map<String, String> userMetadata) {
    this.userMetadata = userMetadata;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamInfo streamInfo = (StreamInfo) o;
    return Objects.equals(this.streamLocation, streamInfo.streamLocation) &&
        Objects.equals(this.containerName, streamInfo.containerName) &&
        Objects.equals(this.providerId, streamInfo.providerId) &&
        Objects.equals(this.streamLength, streamInfo.streamLength) &&
        Objects.equals(this.etag, streamInfo.etag) &&
        Objects.equals(this.timeCreated, streamInfo.timeCreated) &&
        Objects.equals(this.region, streamInfo.region) &&
        Objects.equals(this.contentType, streamInfo.contentType) &&
        Objects.equals(this.timeModified, streamInfo.timeModified) &&
        Objects.equals(this.userMetadata, streamInfo.userMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamLocation, containerName, providerId, streamLength, etag, timeCreated, region, contentType, timeModified, userMetadata);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamInfo {\n");
    
    sb.append("    streamLocation: ").append(toIndentedString(streamLocation)).append("\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    streamLength: ").append(toIndentedString(streamLength)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    timeModified: ").append(toIndentedString(timeModified)).append("\n");
    sb.append("    userMetadata: ").append(toIndentedString(userMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

