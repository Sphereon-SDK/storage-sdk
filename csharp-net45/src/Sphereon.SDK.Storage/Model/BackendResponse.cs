/* 
 * Storage
 *
 * Sphereon Storage APIs provide an abstraction layer for storage of containers (folders) and objects (files), using a filesystem backend or AWS-s3, Azure blobstorage or Google cloud storage backend.
 *
 * OpenAPI spec version: 0.7
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Sphereon.SDK.Storage.Model
{
    /// <summary>
    /// BackendResponse
    /// </summary>
    [DataContract]
    public partial class BackendResponse :  IEquatable<BackendResponse>
    {
        /// <summary>
        /// The type of backend that is created. This field allows users to create a local backend or with supported 3rd parties.
        /// </summary>
        /// <value>The type of backend that is created. This field allows users to create a local backend or with supported 3rd parties.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BackendTypeEnum
        {
            
            /// <summary>
            /// Enum SHAREDSTORAGE for "SHARED_STORAGE"
            /// </summary>
            [EnumMember(Value = "SHARED_STORAGE")]
            SHAREDSTORAGE,
            
            /// <summary>
            /// Enum AMAZONS3 for "AMAZON_S3"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3")]
            AMAZONS3,
            
            /// <summary>
            /// Enum MSAZUREBLOBSTORAGE for "MS_AZURE_BLOB_STORAGE"
            /// </summary>
            [EnumMember(Value = "MS_AZURE_BLOB_STORAGE")]
            MSAZUREBLOBSTORAGE,
            
            /// <summary>
            /// Enum GOOGLECLOUDSTORAGE for "GOOGLE_CLOUD_STORAGE"
            /// </summary>
            [EnumMember(Value = "GOOGLE_CLOUD_STORAGE")]
            GOOGLECLOUDSTORAGE,
            
            /// <summary>
            /// Enum XILLIOENGINE for "XILLIO_ENGINE"
            /// </summary>
            [EnumMember(Value = "XILLIO_ENGINE")]
            XILLIOENGINE
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum REQUEST for "REQUEST"
            /// </summary>
            [EnumMember(Value = "REQUEST")]
            REQUEST,
            
            /// <summary>
            /// Enum CREATED for "CREATED"
            /// </summary>
            [EnumMember(Value = "CREATED")]
            CREATED,
            
            /// <summary>
            /// Enum UPDATED for "UPDATED"
            /// </summary>
            [EnumMember(Value = "UPDATED")]
            UPDATED,
            
            /// <summary>
            /// Enum DELETED for "DELETED"
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED
        }

        /// <summary>
        /// The storage region where the container and files are stored. This option is available for Google and Amazon Storage. For Azure is only possible to set the region when creating the storage account.
        /// </summary>
        /// <value>The storage region where the container and files are stored. This option is available for Google and Amazon Storage. For Azure is only possible to set the region when creating the storage account.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RegionEnum
        {
            
            /// <summary>
            /// Enum AMAZONS3APNORTHEAST1 for "AMAZON_S3_AP_NORTHEAST_1"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_AP_NORTHEAST_1")]
            AMAZONS3APNORTHEAST1,
            
            /// <summary>
            /// Enum AMAZONS3APNORTHEAST2 for "AMAZON_S3_AP_NORTHEAST_2"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_AP_NORTHEAST_2")]
            AMAZONS3APNORTHEAST2,
            
            /// <summary>
            /// Enum AMAZONS3APSOUTH1 for "AMAZON_S3_AP_SOUTH_1"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_AP_SOUTH_1")]
            AMAZONS3APSOUTH1,
            
            /// <summary>
            /// Enum AMAZONS3APSOUTHEAST1 for "AMAZON_S3_AP_SOUTHEAST_1"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_AP_SOUTHEAST_1")]
            AMAZONS3APSOUTHEAST1,
            
            /// <summary>
            /// Enum AMAZONS3APSOUTHEAST2 for "AMAZON_S3_AP_SOUTHEAST_2"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_AP_SOUTHEAST_2")]
            AMAZONS3APSOUTHEAST2,
            
            /// <summary>
            /// Enum AMAZONS3CACENTRAL1 for "AMAZON_S3_CA_CENTRAL_1"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_CA_CENTRAL_1")]
            AMAZONS3CACENTRAL1,
            
            /// <summary>
            /// Enum AMAZONS3CNNORTH1 for "AMAZON_S3_CN_NORTH_1"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_CN_NORTH_1")]
            AMAZONS3CNNORTH1,
            
            /// <summary>
            /// Enum AMAZONS3EUCENTRAL1 for "AMAZON_S3_EU_CENTRAL_1"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_EU_CENTRAL_1")]
            AMAZONS3EUCENTRAL1,
            
            /// <summary>
            /// Enum AMAZONS3EUWEST1 for "AMAZON_S3_EU_WEST_1"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_EU_WEST_1")]
            AMAZONS3EUWEST1,
            
            /// <summary>
            /// Enum AMAZONS3EUWEST2 for "AMAZON_S3_EU_WEST_2"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_EU_WEST_2")]
            AMAZONS3EUWEST2,
            
            /// <summary>
            /// Enum AMAZONS3SAEAST1 for "AMAZON_S3_SA_EAST_1"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_SA_EAST_1")]
            AMAZONS3SAEAST1,
            
            /// <summary>
            /// Enum AMAZONS3USEAST1 for "AMAZON_S3_US_EAST_1"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_US_EAST_1")]
            AMAZONS3USEAST1,
            
            /// <summary>
            /// Enum AMAZONS3USEAST2 for "AMAZON_S3_US_EAST_2"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_US_EAST_2")]
            AMAZONS3USEAST2,
            
            /// <summary>
            /// Enum AMAZONS3USSTANDARD for "AMAZON_S3_US_STANDARD"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_US_STANDARD")]
            AMAZONS3USSTANDARD,
            
            /// <summary>
            /// Enum AMAZONS3USWEST1 for "AMAZON_S3_US_WEST_1"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_US_WEST_1")]
            AMAZONS3USWEST1,
            
            /// <summary>
            /// Enum AMAZONS3USWEST2 for "AMAZON_S3_US_WEST_2"
            /// </summary>
            [EnumMember(Value = "AMAZON_S3_US_WEST_2")]
            AMAZONS3USWEST2,
            
            /// <summary>
            /// Enum GOOGLESTORAGEASIA for "GOOGLE_STORAGE_ASIA"
            /// </summary>
            [EnumMember(Value = "GOOGLE_STORAGE_ASIA")]
            GOOGLESTORAGEASIA,
            
            /// <summary>
            /// Enum GOOGLESTORAGEASIAEAST1 for "GOOGLE_STORAGE_ASIA_EAST1"
            /// </summary>
            [EnumMember(Value = "GOOGLE_STORAGE_ASIA_EAST1")]
            GOOGLESTORAGEASIAEAST1,
            
            /// <summary>
            /// Enum GOOGLESTORAGEEU for "GOOGLE_STORAGE_EU"
            /// </summary>
            [EnumMember(Value = "GOOGLE_STORAGE_EU")]
            GOOGLESTORAGEEU,
            
            /// <summary>
            /// Enum GOOGLESTORAGEUS for "GOOGLE_STORAGE_US"
            /// </summary>
            [EnumMember(Value = "GOOGLE_STORAGE_US")]
            GOOGLESTORAGEUS,
            
            /// <summary>
            /// Enum GOOGLESTORAGEUSCENTRAL1 for "GOOGLE_STORAGE_US_CENTRAL1"
            /// </summary>
            [EnumMember(Value = "GOOGLE_STORAGE_US_CENTRAL1")]
            GOOGLESTORAGEUSCENTRAL1,
            
            /// <summary>
            /// Enum GOOGLESTORAGEUSCENTRAL2 for "GOOGLE_STORAGE_US_CENTRAL2"
            /// </summary>
            [EnumMember(Value = "GOOGLE_STORAGE_US_CENTRAL2")]
            GOOGLESTORAGEUSCENTRAL2,
            
            /// <summary>
            /// Enum GOOGLESTORAGEUSEAST1 for "GOOGLE_STORAGE_US_EAST1"
            /// </summary>
            [EnumMember(Value = "GOOGLE_STORAGE_US_EAST1")]
            GOOGLESTORAGEUSEAST1,
            
            /// <summary>
            /// Enum GOOGLESTORAGEUSEAST2 for "GOOGLE_STORAGE_US_EAST2"
            /// </summary>
            [EnumMember(Value = "GOOGLE_STORAGE_US_EAST2")]
            GOOGLESTORAGEUSEAST2,
            
            /// <summary>
            /// Enum GOOGLESTORAGEUSEAST3 for "GOOGLE_STORAGE_US_EAST3"
            /// </summary>
            [EnumMember(Value = "GOOGLE_STORAGE_US_EAST3")]
            GOOGLESTORAGEUSEAST3,
            
            /// <summary>
            /// Enum GOOGLESTORAGEUSWEST1 for "GOOGLE_STORAGE_US_WEST1"
            /// </summary>
            [EnumMember(Value = "GOOGLE_STORAGE_US_WEST1")]
            GOOGLESTORAGEUSWEST1
        }

        /// <summary>
        /// The type of backend that is created. This field allows users to create a local backend or with supported 3rd parties.
        /// </summary>
        /// <value>The type of backend that is created. This field allows users to create a local backend or with supported 3rd parties.</value>
        [DataMember(Name="backendType", EmitDefaultValue=false)]
        public BackendTypeEnum? BackendType { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// The storage region where the container and files are stored. This option is available for Google and Amazon Storage. For Azure is only possible to set the region when creating the storage account.
        /// </summary>
        /// <value>The storage region where the container and files are stored. This option is available for Google and Amazon Storage. For Azure is only possible to set the region when creating the storage account.</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public RegionEnum? Region { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BackendResponse" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Id">Id.</param>
        /// <param name="State">State.</param>
        /// <param name="Region">The storage region where the container and files are stored. This option is available for Google and Amazon Storage. For Azure is only possible to set the region when creating the storage account..</param>
        /// <param name="ParentId">The backend that is used for when properties are not set. This allows credentials to be set at one backend and used by multiple backends..</param>
        public BackendResponse(string Name = null, string Id = null, StateEnum? State = null, RegionEnum? Region = null, string ParentId = null)
        {
            this.Name = Name;
            this.Id = Id;
            this.State = State;
            this.Region = Region;
            this.ParentId = ParentId;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The backend that is used for when properties are not set. This allows credentials to be set at one backend and used by multiple backends.
        /// </summary>
        /// <value>The backend that is used for when properties are not set. This allows credentials to be set at one backend and used by multiple backends.</value>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public string ParentId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BackendResponse {\n");
            sb.Append("  BackendType: ").Append(BackendType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BackendResponse);
        }

        /// <summary>
        /// Returns true if BackendResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of BackendResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BackendResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BackendType == other.BackendType ||
                    this.BackendType != null &&
                    this.BackendType.Equals(other.BackendType)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.ParentId == other.ParentId ||
                    this.ParentId != null &&
                    this.ParentId.Equals(other.ParentId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BackendType != null)
                    hash = hash * 59 + this.BackendType.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.ParentId != null)
                    hash = hash * 59 + this.ParentId.GetHashCode();
                return hash;
            }
        }
    }

}
