/* 
 * Storage
 *
 * Sphereon Storage APIs provide an abstraction layer for storage of containers (folders) and objects (files), using a filesystem backend or AWS-s3, Azure blobstorage or Google cloud storage backend.
 *
 * OpenAPI spec version: 0.7
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Sphereon.SDK.Storage.Model
{
    /// <summary>
    /// Information record from a data stream
    /// </summary>
    [DataContract]
    public partial class StreamInfo :  IEquatable<StreamInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamInfo" /> class.
        /// </summary>
        /// <param name="StreamLocation">StreamLocation.</param>
        /// <param name="ContainerName">ContainerName.</param>
        /// <param name="ProviderId">ProviderId.</param>
        /// <param name="StreamLength">StreamLength.</param>
        /// <param name="ETag">ETag.</param>
        /// <param name="Etag">Etag.</param>
        /// <param name="TimeCreated">TimeCreated.</param>
        /// <param name="BackendLocation">BackendLocation.</param>
        /// <param name="ContentType">ContentType.</param>
        /// <param name="TimeModified">TimeModified.</param>
        /// <param name="UserMetadata">UserMetadata.</param>
        public StreamInfo(StreamLocation StreamLocation = null, string ContainerName = null, string ProviderId = null, long? StreamLength = null, string ETag = null, string Etag = null, DateTime? TimeCreated = null, BackendLocation BackendLocation = null, string ContentType = null, DateTime? TimeModified = null, Dictionary<string, string> UserMetadata = null)
        {
            this.StreamLocation = StreamLocation;
            this.ContainerName = ContainerName;
            this.ProviderId = ProviderId;
            this.StreamLength = StreamLength;
            this.ETag = ETag;
            this.Etag = Etag;
            this.TimeCreated = TimeCreated;
            this.BackendLocation = BackendLocation;
            this.ContentType = ContentType;
            this.TimeModified = TimeModified;
            this.UserMetadata = UserMetadata;
        }
        
        /// <summary>
        /// Gets or Sets StreamLocation
        /// </summary>
        [DataMember(Name="streamLocation", EmitDefaultValue=false)]
        public StreamLocation StreamLocation { get; set; }
        /// <summary>
        /// Gets or Sets ContainerName
        /// </summary>
        [DataMember(Name="containerName", EmitDefaultValue=false)]
        public string ContainerName { get; set; }
        /// <summary>
        /// Gets or Sets ProviderId
        /// </summary>
        [DataMember(Name="providerId", EmitDefaultValue=false)]
        public string ProviderId { get; set; }
        /// <summary>
        /// Gets or Sets StreamLength
        /// </summary>
        [DataMember(Name="streamLength", EmitDefaultValue=false)]
        public long? StreamLength { get; set; }
        /// <summary>
        /// Gets or Sets ETag
        /// </summary>
        [DataMember(Name="eTag", EmitDefaultValue=false)]
        public string ETag { get; set; }
        /// <summary>
        /// Gets or Sets Etag
        /// </summary>
        [DataMember(Name="etag", EmitDefaultValue=false)]
        public string Etag { get; set; }
        /// <summary>
        /// Gets or Sets TimeCreated
        /// </summary>
        [DataMember(Name="timeCreated", EmitDefaultValue=false)]
        public DateTime? TimeCreated { get; set; }
        /// <summary>
        /// Gets or Sets BackendLocation
        /// </summary>
        [DataMember(Name="backendLocation", EmitDefaultValue=false)]
        public BackendLocation BackendLocation { get; set; }
        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public string ContentType { get; set; }
        /// <summary>
        /// Gets or Sets TimeModified
        /// </summary>
        [DataMember(Name="timeModified", EmitDefaultValue=false)]
        public DateTime? TimeModified { get; set; }
        /// <summary>
        /// Gets or Sets UserMetadata
        /// </summary>
        [DataMember(Name="userMetadata", EmitDefaultValue=false)]
        public Dictionary<string, string> UserMetadata { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StreamInfo {\n");
            sb.Append("  StreamLocation: ").Append(StreamLocation).Append("\n");
            sb.Append("  ContainerName: ").Append(ContainerName).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  StreamLength: ").Append(StreamLength).Append("\n");
            sb.Append("  ETag: ").Append(ETag).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  TimeCreated: ").Append(TimeCreated).Append("\n");
            sb.Append("  BackendLocation: ").Append(BackendLocation).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  TimeModified: ").Append(TimeModified).Append("\n");
            sb.Append("  UserMetadata: ").Append(UserMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StreamInfo);
        }

        /// <summary>
        /// Returns true if StreamInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of StreamInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StreamInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StreamLocation == other.StreamLocation ||
                    this.StreamLocation != null &&
                    this.StreamLocation.Equals(other.StreamLocation)
                ) && 
                (
                    this.ContainerName == other.ContainerName ||
                    this.ContainerName != null &&
                    this.ContainerName.Equals(other.ContainerName)
                ) && 
                (
                    this.ProviderId == other.ProviderId ||
                    this.ProviderId != null &&
                    this.ProviderId.Equals(other.ProviderId)
                ) && 
                (
                    this.StreamLength == other.StreamLength ||
                    this.StreamLength != null &&
                    this.StreamLength.Equals(other.StreamLength)
                ) && 
                (
                    this.ETag == other.ETag ||
                    this.ETag != null &&
                    this.ETag.Equals(other.ETag)
                ) && 
                (
                    this.Etag == other.Etag ||
                    this.Etag != null &&
                    this.Etag.Equals(other.Etag)
                ) && 
                (
                    this.TimeCreated == other.TimeCreated ||
                    this.TimeCreated != null &&
                    this.TimeCreated.Equals(other.TimeCreated)
                ) && 
                (
                    this.BackendLocation == other.BackendLocation ||
                    this.BackendLocation != null &&
                    this.BackendLocation.Equals(other.BackendLocation)
                ) && 
                (
                    this.ContentType == other.ContentType ||
                    this.ContentType != null &&
                    this.ContentType.Equals(other.ContentType)
                ) && 
                (
                    this.TimeModified == other.TimeModified ||
                    this.TimeModified != null &&
                    this.TimeModified.Equals(other.TimeModified)
                ) && 
                (
                    this.UserMetadata == other.UserMetadata ||
                    this.UserMetadata != null &&
                    this.UserMetadata.SequenceEqual(other.UserMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StreamLocation != null)
                    hash = hash * 59 + this.StreamLocation.GetHashCode();
                if (this.ContainerName != null)
                    hash = hash * 59 + this.ContainerName.GetHashCode();
                if (this.ProviderId != null)
                    hash = hash * 59 + this.ProviderId.GetHashCode();
                if (this.StreamLength != null)
                    hash = hash * 59 + this.StreamLength.GetHashCode();
                if (this.ETag != null)
                    hash = hash * 59 + this.ETag.GetHashCode();
                if (this.Etag != null)
                    hash = hash * 59 + this.Etag.GetHashCode();
                if (this.TimeCreated != null)
                    hash = hash * 59 + this.TimeCreated.GetHashCode();
                if (this.BackendLocation != null)
                    hash = hash * 59 + this.BackendLocation.GetHashCode();
                if (this.ContentType != null)
                    hash = hash * 59 + this.ContentType.GetHashCode();
                if (this.TimeModified != null)
                    hash = hash * 59 + this.TimeModified.GetHashCode();
                if (this.UserMetadata != null)
                    hash = hash * 59 + this.UserMetadata.GetHashCode();
                return hash;
            }
        }
    }

}
