/* 
 * Storage
 *
 * Sphereon Storage APIs provide an abstraction layer for storage of containers (folders) and objects (files), using a filesystem backend or AWS-s3, Azure blobstorage or Google cloud storage backend.
 *
 * OpenAPI spec version: 0.7
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Sphereon.SDK.Storage.Model
{
    /// <summary>
    /// BackendLocation
    /// </summary>
    [DataContract]
    public partial class BackendLocation :  IEquatable<BackendLocation>
    {
        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            
            /// <summary>
            /// Enum PROVIDER for "PROVIDER"
            /// </summary>
            [EnumMember(Value = "PROVIDER")]
            PROVIDER,
            
            /// <summary>
            /// Enum REGION for "REGION"
            /// </summary>
            [EnumMember(Value = "REGION")]
            REGION,
            
            /// <summary>
            /// Enum ZONE for "ZONE"
            /// </summary>
            [EnumMember(Value = "ZONE")]
            ZONE,
            
            /// <summary>
            /// Enum SYSTEM for "SYSTEM"
            /// </summary>
            [EnumMember(Value = "SYSTEM")]
            SYSTEM,
            
            /// <summary>
            /// Enum NETWORK for "NETWORK"
            /// </summary>
            [EnumMember(Value = "NETWORK")]
            NETWORK,
            
            /// <summary>
            /// Enum HOST for "HOST"
            /// </summary>
            [EnumMember(Value = "HOST")]
            HOST
        }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BackendLocation" /> class.
        /// </summary>
        /// <param name="Parent">Parent.</param>
        /// <param name="Metadata">Metadata.</param>
        /// <param name="Iso3166Codes">Iso3166Codes.</param>
        /// <param name="Scope">Scope.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Id">Id.</param>
        public BackendLocation(BackendLocation Parent = null, Object Metadata = null, List<string> Iso3166Codes = null, ScopeEnum? Scope = null, string Description = null, string Id = null)
        {
            this.Parent = Parent;
            this.Metadata = Metadata;
            this.Iso3166Codes = Iso3166Codes;
            this.Scope = Scope;
            this.Description = Description;
            this.Id = Id;
        }
        
        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name="parent", EmitDefaultValue=false)]
        public BackendLocation Parent { get; set; }
        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }
        /// <summary>
        /// Gets or Sets Iso3166Codes
        /// </summary>
        [DataMember(Name="iso3166Codes", EmitDefaultValue=false)]
        public List<string> Iso3166Codes { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BackendLocation {\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Iso3166Codes: ").Append(Iso3166Codes).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BackendLocation);
        }

        /// <summary>
        /// Returns true if BackendLocation instances are equal
        /// </summary>
        /// <param name="other">Instance of BackendLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BackendLocation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                ) && 
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.Equals(other.Metadata)
                ) && 
                (
                    this.Iso3166Codes == other.Iso3166Codes ||
                    this.Iso3166Codes != null &&
                    this.Iso3166Codes.SequenceEqual(other.Iso3166Codes)
                ) && 
                (
                    this.Scope == other.Scope ||
                    this.Scope != null &&
                    this.Scope.Equals(other.Scope)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                if (this.Iso3166Codes != null)
                    hash = hash * 59 + this.Iso3166Codes.GetHashCode();
                if (this.Scope != null)
                    hash = hash * 59 + this.Scope.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }
    }

}
