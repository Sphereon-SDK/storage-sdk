/* 
 * Storage
 *
 * Sphereon Storage APIs provide an abstraction layer for storage of containers (folders) and objects (files), using a filesystem backend or AWS-s3, Azure blobstorage or Google cloud storage backend.
 *
 * OpenAPI spec version: 0.7
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Sphereon.SDK.STORAGE.Client;
using Sphereon.SDK.STORAGE.Model;

namespace Sphereon.SDK.STORAGE.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new backend
        /// </summary>
        /// <remarks>
        /// Create a new backend
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>BackendResponse</returns>
        BackendResponse CreateBackend (BackendRequest backendRequest);

        /// <summary>
        /// Create a new backend
        /// </summary>
        /// <remarks>
        /// Create a new backend
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>ApiResponse of BackendResponse</returns>
        ApiResponse<BackendResponse> CreateBackendWithHttpInfo (BackendRequest backendRequest);
        /// <summary>
        /// Create a new container
        /// </summary>
        /// <remarks>
        /// Create a new container
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>ContainerResponse</returns>
        ContainerResponse CreateContainer (ContainerRequest containerRequest);

        /// <summary>
        /// Create a new container
        /// </summary>
        /// <remarks>
        /// Create a new container
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>ApiResponse of ContainerResponse</returns>
        ApiResponse<ContainerResponse> CreateContainerWithHttpInfo (ContainerRequest containerRequest);
        /// <summary>
        /// Create a new object within a container
        /// </summary>
        /// <remarks>
        /// Create a new object within a container. If the container did not exist yet, it will be created on the fly with a default policy, hence no 404 http status will be returned
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <param name="stream">stream</param>
        /// <returns></returns>
        void CreateObject (string containerId, string objectPath, System.IO.Stream stream);

        /// <summary>
        /// Create a new object within a container
        /// </summary>
        /// <remarks>
        /// Create a new object within a container. If the container did not exist yet, it will be created on the fly with a default policy, hence no 404 http status will be returned
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <param name="stream">stream</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateObjectWithHttpInfo (string containerId, string objectPath, System.IO.Stream stream);
        /// <summary>
        /// Delete a backend
        /// </summary>
        /// <remarks>
        /// Delete a backend
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <returns>BackendResponse</returns>
        BackendResponse DeleteBackend (string backendId);

        /// <summary>
        /// Delete a backend
        /// </summary>
        /// <remarks>
        /// Delete a backend
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <returns>ApiResponse of BackendResponse</returns>
        ApiResponse<BackendResponse> DeleteBackendWithHttpInfo (string backendId);
        /// <summary>
        /// Delete an existing container
        /// </summary>
        /// <remarks>
        /// Delete an existing container including the stored objects if indicated.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="delete">delete (optional)</param>
        /// <returns>ContainerResponse</returns>
        ContainerResponse DeleteContainer (string containerId, string delete = null);

        /// <summary>
        /// Delete an existing container
        /// </summary>
        /// <remarks>
        /// Delete an existing container including the stored objects if indicated.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="delete">delete (optional)</param>
        /// <returns>ApiResponse of ContainerResponse</returns>
        ApiResponse<ContainerResponse> DeleteContainerWithHttpInfo (string containerId, string delete = null);
        /// <summary>
        /// Delete an existing object from a container.
        /// </summary>
        /// <remarks>
        /// Delete an existing object from a container. There is no request nor response body for a delete request.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns></returns>
        void DeleteObject (string containerId, string objectPath);

        /// <summary>
        /// Delete an existing object from a container.
        /// </summary>
        /// <remarks>
        /// Delete an existing object from a container. There is no request nor response body for a delete request.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteObjectWithHttpInfo (string containerId, string objectPath);
        /// <summary>
        /// Get container information
        /// </summary>
        /// <remarks>
        /// Get information on a container
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <returns>ContainerResponse</returns>
        ContainerResponse GetContainerInfo (string containerId);

        /// <summary>
        /// Get container information
        /// </summary>
        /// <remarks>
        /// Get information on a container
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <returns>ApiResponse of ContainerResponse</returns>
        ApiResponse<ContainerResponse> GetContainerInfoWithHttpInfo (string containerId);
        /// <summary>
        /// Get an existing object from a container
        /// </summary>
        /// <remarks>
        /// Get an existing object from a container
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns>byte[]</returns>
        byte[] GetObject (string containerId, string objectPath);

        /// <summary>
        /// Get an existing object from a container
        /// </summary>
        /// <remarks>
        /// Get an existing object from a container
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetObjectWithHttpInfo (string containerId, string objectPath);
        /// <summary>
        /// Update a backend
        /// </summary>
        /// <remarks>
        /// Update a backend
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>BackendResponse</returns>
        BackendResponse UpdateBackend (string backendId, BackendRequest backendRequest);

        /// <summary>
        /// Update a backend
        /// </summary>
        /// <remarks>
        /// Update a backend
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>ApiResponse of BackendResponse</returns>
        ApiResponse<BackendResponse> UpdateBackendWithHttpInfo (string backendId, BackendRequest backendRequest);
        /// <summary>
        /// Update a container
        /// </summary>
        /// <remarks>
        /// Update an existing container with new container settings
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>ContainerResponse</returns>
        ContainerResponse UpdateContainer (string containerId, ContainerRequest containerRequest);

        /// <summary>
        /// Update a container
        /// </summary>
        /// <remarks>
        /// Update an existing container with new container settings
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>ApiResponse of ContainerResponse</returns>
        ApiResponse<ContainerResponse> UpdateContainerWithHttpInfo (string containerId, ContainerRequest containerRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new backend
        /// </summary>
        /// <remarks>
        /// Create a new backend
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>Task of BackendResponse</returns>
        System.Threading.Tasks.Task<BackendResponse> CreateBackendAsync (BackendRequest backendRequest);

        /// <summary>
        /// Create a new backend
        /// </summary>
        /// <remarks>
        /// Create a new backend
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>Task of ApiResponse (BackendResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackendResponse>> CreateBackendAsyncWithHttpInfo (BackendRequest backendRequest);
        /// <summary>
        /// Create a new container
        /// </summary>
        /// <remarks>
        /// Create a new container
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>Task of ContainerResponse</returns>
        System.Threading.Tasks.Task<ContainerResponse> CreateContainerAsync (ContainerRequest containerRequest);

        /// <summary>
        /// Create a new container
        /// </summary>
        /// <remarks>
        /// Create a new container
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>Task of ApiResponse (ContainerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContainerResponse>> CreateContainerAsyncWithHttpInfo (ContainerRequest containerRequest);
        /// <summary>
        /// Create a new object within a container
        /// </summary>
        /// <remarks>
        /// Create a new object within a container. If the container did not exist yet, it will be created on the fly with a default policy, hence no 404 http status will be returned
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <param name="stream">stream</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateObjectAsync (string containerId, string objectPath, System.IO.Stream stream);

        /// <summary>
        /// Create a new object within a container
        /// </summary>
        /// <remarks>
        /// Create a new object within a container. If the container did not exist yet, it will be created on the fly with a default policy, hence no 404 http status will be returned
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <param name="stream">stream</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateObjectAsyncWithHttpInfo (string containerId, string objectPath, System.IO.Stream stream);
        /// <summary>
        /// Delete a backend
        /// </summary>
        /// <remarks>
        /// Delete a backend
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <returns>Task of BackendResponse</returns>
        System.Threading.Tasks.Task<BackendResponse> DeleteBackendAsync (string backendId);

        /// <summary>
        /// Delete a backend
        /// </summary>
        /// <remarks>
        /// Delete a backend
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <returns>Task of ApiResponse (BackendResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackendResponse>> DeleteBackendAsyncWithHttpInfo (string backendId);
        /// <summary>
        /// Delete an existing container
        /// </summary>
        /// <remarks>
        /// Delete an existing container including the stored objects if indicated.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="delete">delete (optional)</param>
        /// <returns>Task of ContainerResponse</returns>
        System.Threading.Tasks.Task<ContainerResponse> DeleteContainerAsync (string containerId, string delete = null);

        /// <summary>
        /// Delete an existing container
        /// </summary>
        /// <remarks>
        /// Delete an existing container including the stored objects if indicated.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="delete">delete (optional)</param>
        /// <returns>Task of ApiResponse (ContainerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContainerResponse>> DeleteContainerAsyncWithHttpInfo (string containerId, string delete = null);
        /// <summary>
        /// Delete an existing object from a container.
        /// </summary>
        /// <remarks>
        /// Delete an existing object from a container. There is no request nor response body for a delete request.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteObjectAsync (string containerId, string objectPath);

        /// <summary>
        /// Delete an existing object from a container.
        /// </summary>
        /// <remarks>
        /// Delete an existing object from a container. There is no request nor response body for a delete request.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteObjectAsyncWithHttpInfo (string containerId, string objectPath);
        /// <summary>
        /// Get container information
        /// </summary>
        /// <remarks>
        /// Get information on a container
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <returns>Task of ContainerResponse</returns>
        System.Threading.Tasks.Task<ContainerResponse> GetContainerInfoAsync (string containerId);

        /// <summary>
        /// Get container information
        /// </summary>
        /// <remarks>
        /// Get information on a container
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <returns>Task of ApiResponse (ContainerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContainerResponse>> GetContainerInfoAsyncWithHttpInfo (string containerId);
        /// <summary>
        /// Get an existing object from a container
        /// </summary>
        /// <remarks>
        /// Get an existing object from a container
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetObjectAsync (string containerId, string objectPath);

        /// <summary>
        /// Get an existing object from a container
        /// </summary>
        /// <remarks>
        /// Get an existing object from a container
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetObjectAsyncWithHttpInfo (string containerId, string objectPath);
        /// <summary>
        /// Update a backend
        /// </summary>
        /// <remarks>
        /// Update a backend
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>Task of BackendResponse</returns>
        System.Threading.Tasks.Task<BackendResponse> UpdateBackendAsync (string backendId, BackendRequest backendRequest);

        /// <summary>
        /// Update a backend
        /// </summary>
        /// <remarks>
        /// Update a backend
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>Task of ApiResponse (BackendResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackendResponse>> UpdateBackendAsyncWithHttpInfo (string backendId, BackendRequest backendRequest);
        /// <summary>
        /// Update a container
        /// </summary>
        /// <remarks>
        /// Update an existing container with new container settings
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>Task of ContainerResponse</returns>
        System.Threading.Tasks.Task<ContainerResponse> UpdateContainerAsync (string containerId, ContainerRequest containerRequest);

        /// <summary>
        /// Update a container
        /// </summary>
        /// <remarks>
        /// Update an existing container with new container settings
        /// </remarks>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>Task of ApiResponse (ContainerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContainerResponse>> UpdateContainerAsyncWithHttpInfo (string containerId, ContainerRequest containerRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StorageApi : IStorageApi
    {
        private Sphereon.SDK.STORAGE.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StorageApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Sphereon.SDK.STORAGE.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StorageApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Sphereon.SDK.STORAGE.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sphereon.SDK.STORAGE.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new backend Create a new backend
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>BackendResponse</returns>
        public BackendResponse CreateBackend (BackendRequest backendRequest)
        {
             ApiResponse<BackendResponse> localVarResponse = CreateBackendWithHttpInfo(backendRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new backend Create a new backend
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>ApiResponse of BackendResponse</returns>
        public ApiResponse< BackendResponse > CreateBackendWithHttpInfo (BackendRequest backendRequest)
        {
            // verify the required parameter 'backendRequest' is set
            if (backendRequest == null)
                throw new ApiException(400, "Missing required parameter 'backendRequest' when calling StorageApi->CreateBackend");

            var localVarPath = "/bucket-storage/0.7/backends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (backendRequest != null && backendRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(backendRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = backendRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBackend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackendResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackendResponse)));
            
        }

        /// <summary>
        /// Create a new backend Create a new backend
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>Task of BackendResponse</returns>
        public async System.Threading.Tasks.Task<BackendResponse> CreateBackendAsync (BackendRequest backendRequest)
        {
             ApiResponse<BackendResponse> localVarResponse = await CreateBackendAsyncWithHttpInfo(backendRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new backend Create a new backend
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>Task of ApiResponse (BackendResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BackendResponse>> CreateBackendAsyncWithHttpInfo (BackendRequest backendRequest)
        {
            // verify the required parameter 'backendRequest' is set
            if (backendRequest == null)
                throw new ApiException(400, "Missing required parameter 'backendRequest' when calling StorageApi->CreateBackend");

            var localVarPath = "/bucket-storage/0.7/backends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (backendRequest != null && backendRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(backendRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = backendRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBackend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackendResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackendResponse)));
            
        }

        /// <summary>
        /// Create a new container Create a new container
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>ContainerResponse</returns>
        public ContainerResponse CreateContainer (ContainerRequest containerRequest)
        {
             ApiResponse<ContainerResponse> localVarResponse = CreateContainerWithHttpInfo(containerRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new container Create a new container
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>ApiResponse of ContainerResponse</returns>
        public ApiResponse< ContainerResponse > CreateContainerWithHttpInfo (ContainerRequest containerRequest)
        {
            // verify the required parameter 'containerRequest' is set
            if (containerRequest == null)
                throw new ApiException(400, "Missing required parameter 'containerRequest' when calling StorageApi->CreateContainer");

            var localVarPath = "/bucket-storage/0.7/containers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerRequest != null && containerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(containerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = containerRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContainerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContainerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerResponse)));
            
        }

        /// <summary>
        /// Create a new container Create a new container
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>Task of ContainerResponse</returns>
        public async System.Threading.Tasks.Task<ContainerResponse> CreateContainerAsync (ContainerRequest containerRequest)
        {
             ApiResponse<ContainerResponse> localVarResponse = await CreateContainerAsyncWithHttpInfo(containerRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new container Create a new container
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>Task of ApiResponse (ContainerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContainerResponse>> CreateContainerAsyncWithHttpInfo (ContainerRequest containerRequest)
        {
            // verify the required parameter 'containerRequest' is set
            if (containerRequest == null)
                throw new ApiException(400, "Missing required parameter 'containerRequest' when calling StorageApi->CreateContainer");

            var localVarPath = "/bucket-storage/0.7/containers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerRequest != null && containerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(containerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = containerRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContainerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContainerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerResponse)));
            
        }

        /// <summary>
        /// Create a new object within a container Create a new object within a container. If the container did not exist yet, it will be created on the fly with a default policy, hence no 404 http status will be returned
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <param name="stream">stream</param>
        /// <returns></returns>
        public void CreateObject (string containerId, string objectPath, System.IO.Stream stream)
        {
             CreateObjectWithHttpInfo(containerId, objectPath, stream);
        }

        /// <summary>
        /// Create a new object within a container Create a new object within a container. If the container did not exist yet, it will be created on the fly with a default policy, hence no 404 http status will be returned
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <param name="stream">stream</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateObjectWithHttpInfo (string containerId, string objectPath, System.IO.Stream stream)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling StorageApi->CreateObject");
            // verify the required parameter 'objectPath' is set
            if (objectPath == null)
                throw new ApiException(400, "Missing required parameter 'objectPath' when calling StorageApi->CreateObject");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling StorageApi->CreateObject");

            var localVarPath = "/bucket-storage/0.7/containers/{containerId}/objects/{objectPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (objectPath != null) localVarPathParams.Add("objectPath", Configuration.ApiClient.ParameterToString(objectPath)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateObject", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new object within a container Create a new object within a container. If the container did not exist yet, it will be created on the fly with a default policy, hence no 404 http status will be returned
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <param name="stream">stream</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateObjectAsync (string containerId, string objectPath, System.IO.Stream stream)
        {
             await CreateObjectAsyncWithHttpInfo(containerId, objectPath, stream);

        }

        /// <summary>
        /// Create a new object within a container Create a new object within a container. If the container did not exist yet, it will be created on the fly with a default policy, hence no 404 http status will be returned
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <param name="stream">stream</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateObjectAsyncWithHttpInfo (string containerId, string objectPath, System.IO.Stream stream)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling StorageApi->CreateObject");
            // verify the required parameter 'objectPath' is set
            if (objectPath == null)
                throw new ApiException(400, "Missing required parameter 'objectPath' when calling StorageApi->CreateObject");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling StorageApi->CreateObject");

            var localVarPath = "/bucket-storage/0.7/containers/{containerId}/objects/{objectPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (objectPath != null) localVarPathParams.Add("objectPath", Configuration.ApiClient.ParameterToString(objectPath)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateObject", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a backend Delete a backend
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <returns>BackendResponse</returns>
        public BackendResponse DeleteBackend (string backendId)
        {
             ApiResponse<BackendResponse> localVarResponse = DeleteBackendWithHttpInfo(backendId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a backend Delete a backend
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <returns>ApiResponse of BackendResponse</returns>
        public ApiResponse< BackendResponse > DeleteBackendWithHttpInfo (string backendId)
        {
            // verify the required parameter 'backendId' is set
            if (backendId == null)
                throw new ApiException(400, "Missing required parameter 'backendId' when calling StorageApi->DeleteBackend");

            var localVarPath = "/bucket-storage/0.7/backends/{backendId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (backendId != null) localVarPathParams.Add("backendId", Configuration.ApiClient.ParameterToString(backendId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBackend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackendResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackendResponse)));
            
        }

        /// <summary>
        /// Delete a backend Delete a backend
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <returns>Task of BackendResponse</returns>
        public async System.Threading.Tasks.Task<BackendResponse> DeleteBackendAsync (string backendId)
        {
             ApiResponse<BackendResponse> localVarResponse = await DeleteBackendAsyncWithHttpInfo(backendId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a backend Delete a backend
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <returns>Task of ApiResponse (BackendResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BackendResponse>> DeleteBackendAsyncWithHttpInfo (string backendId)
        {
            // verify the required parameter 'backendId' is set
            if (backendId == null)
                throw new ApiException(400, "Missing required parameter 'backendId' when calling StorageApi->DeleteBackend");

            var localVarPath = "/bucket-storage/0.7/backends/{backendId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (backendId != null) localVarPathParams.Add("backendId", Configuration.ApiClient.ParameterToString(backendId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBackend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackendResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackendResponse)));
            
        }

        /// <summary>
        /// Delete an existing container Delete an existing container including the stored objects if indicated.
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="delete">delete (optional)</param>
        /// <returns>ContainerResponse</returns>
        public ContainerResponse DeleteContainer (string containerId, string delete = null)
        {
             ApiResponse<ContainerResponse> localVarResponse = DeleteContainerWithHttpInfo(containerId, delete);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing container Delete an existing container including the stored objects if indicated.
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="delete">delete (optional)</param>
        /// <returns>ApiResponse of ContainerResponse</returns>
        public ApiResponse< ContainerResponse > DeleteContainerWithHttpInfo (string containerId, string delete = null)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling StorageApi->DeleteContainer");

            var localVarPath = "/bucket-storage/0.7/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (delete != null) localVarQueryParams.Add("delete", Configuration.ApiClient.ParameterToString(delete)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContainerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContainerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerResponse)));
            
        }

        /// <summary>
        /// Delete an existing container Delete an existing container including the stored objects if indicated.
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="delete">delete (optional)</param>
        /// <returns>Task of ContainerResponse</returns>
        public async System.Threading.Tasks.Task<ContainerResponse> DeleteContainerAsync (string containerId, string delete = null)
        {
             ApiResponse<ContainerResponse> localVarResponse = await DeleteContainerAsyncWithHttpInfo(containerId, delete);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing container Delete an existing container including the stored objects if indicated.
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="delete">delete (optional)</param>
        /// <returns>Task of ApiResponse (ContainerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContainerResponse>> DeleteContainerAsyncWithHttpInfo (string containerId, string delete = null)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling StorageApi->DeleteContainer");

            var localVarPath = "/bucket-storage/0.7/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (delete != null) localVarQueryParams.Add("delete", Configuration.ApiClient.ParameterToString(delete)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContainerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContainerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerResponse)));
            
        }

        /// <summary>
        /// Delete an existing object from a container. Delete an existing object from a container. There is no request nor response body for a delete request.
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns></returns>
        public void DeleteObject (string containerId, string objectPath)
        {
             DeleteObjectWithHttpInfo(containerId, objectPath);
        }

        /// <summary>
        /// Delete an existing object from a container. Delete an existing object from a container. There is no request nor response body for a delete request.
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteObjectWithHttpInfo (string containerId, string objectPath)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling StorageApi->DeleteObject");
            // verify the required parameter 'objectPath' is set
            if (objectPath == null)
                throw new ApiException(400, "Missing required parameter 'objectPath' when calling StorageApi->DeleteObject");

            var localVarPath = "/bucket-storage/0.7/containers/{containerId}/objects/{objectPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (objectPath != null) localVarPathParams.Add("objectPath", Configuration.ApiClient.ParameterToString(objectPath)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteObject", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an existing object from a container. Delete an existing object from a container. There is no request nor response body for a delete request.
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteObjectAsync (string containerId, string objectPath)
        {
             await DeleteObjectAsyncWithHttpInfo(containerId, objectPath);

        }

        /// <summary>
        /// Delete an existing object from a container. Delete an existing object from a container. There is no request nor response body for a delete request.
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteObjectAsyncWithHttpInfo (string containerId, string objectPath)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling StorageApi->DeleteObject");
            // verify the required parameter 'objectPath' is set
            if (objectPath == null)
                throw new ApiException(400, "Missing required parameter 'objectPath' when calling StorageApi->DeleteObject");

            var localVarPath = "/bucket-storage/0.7/containers/{containerId}/objects/{objectPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*_/_*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (objectPath != null) localVarPathParams.Add("objectPath", Configuration.ApiClient.ParameterToString(objectPath)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteObject", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get container information Get information on a container
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <returns>ContainerResponse</returns>
        public ContainerResponse GetContainerInfo (string containerId)
        {
             ApiResponse<ContainerResponse> localVarResponse = GetContainerInfoWithHttpInfo(containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get container information Get information on a container
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <returns>ApiResponse of ContainerResponse</returns>
        public ApiResponse< ContainerResponse > GetContainerInfoWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling StorageApi->GetContainerInfo");

            var localVarPath = "/bucket-storage/0.7/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContainerInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContainerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContainerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerResponse)));
            
        }

        /// <summary>
        /// Get container information Get information on a container
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <returns>Task of ContainerResponse</returns>
        public async System.Threading.Tasks.Task<ContainerResponse> GetContainerInfoAsync (string containerId)
        {
             ApiResponse<ContainerResponse> localVarResponse = await GetContainerInfoAsyncWithHttpInfo(containerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get container information Get information on a container
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <returns>Task of ApiResponse (ContainerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContainerResponse>> GetContainerInfoAsyncWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling StorageApi->GetContainerInfo");

            var localVarPath = "/bucket-storage/0.7/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContainerInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContainerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContainerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerResponse)));
            
        }

        /// <summary>
        /// Get an existing object from a container Get an existing object from a container
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns>byte[]</returns>
        public byte[] GetObject (string containerId, string objectPath)
        {
             ApiResponse<byte[]> localVarResponse = GetObjectWithHttpInfo(containerId, objectPath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an existing object from a container Get an existing object from a container
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GetObjectWithHttpInfo (string containerId, string objectPath)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling StorageApi->GetObject");
            // verify the required parameter 'objectPath' is set
            if (objectPath == null)
                throw new ApiException(400, "Missing required parameter 'objectPath' when calling StorageApi->GetObject");

            var localVarPath = "/bucket-storage/0.7/containers/{containerId}/objects/{objectPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream", 
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (objectPath != null) localVarPathParams.Add("objectPath", Configuration.ApiClient.ParameterToString(objectPath)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
            
        }

        /// <summary>
        /// Get an existing object from a container Get an existing object from a container
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetObjectAsync (string containerId, string objectPath)
        {
             ApiResponse<byte[]> localVarResponse = await GetObjectAsyncWithHttpInfo(containerId, objectPath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an existing object from a container Get an existing object from a container
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="objectPath">objectPath</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GetObjectAsyncWithHttpInfo (string containerId, string objectPath)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling StorageApi->GetObject");
            // verify the required parameter 'objectPath' is set
            if (objectPath == null)
                throw new ApiException(400, "Missing required parameter 'objectPath' when calling StorageApi->GetObject");

            var localVarPath = "/bucket-storage/0.7/containers/{containerId}/objects/{objectPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream", 
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (objectPath != null) localVarPathParams.Add("objectPath", Configuration.ApiClient.ParameterToString(objectPath)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
            
        }

        /// <summary>
        /// Update a backend Update a backend
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>BackendResponse</returns>
        public BackendResponse UpdateBackend (string backendId, BackendRequest backendRequest)
        {
             ApiResponse<BackendResponse> localVarResponse = UpdateBackendWithHttpInfo(backendId, backendRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a backend Update a backend
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>ApiResponse of BackendResponse</returns>
        public ApiResponse< BackendResponse > UpdateBackendWithHttpInfo (string backendId, BackendRequest backendRequest)
        {
            // verify the required parameter 'backendId' is set
            if (backendId == null)
                throw new ApiException(400, "Missing required parameter 'backendId' when calling StorageApi->UpdateBackend");
            // verify the required parameter 'backendRequest' is set
            if (backendRequest == null)
                throw new ApiException(400, "Missing required parameter 'backendRequest' when calling StorageApi->UpdateBackend");

            var localVarPath = "/bucket-storage/0.7/backends/{backendId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (backendId != null) localVarPathParams.Add("backendId", Configuration.ApiClient.ParameterToString(backendId)); // path parameter
            if (backendRequest != null && backendRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(backendRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = backendRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBackend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackendResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackendResponse)));
            
        }

        /// <summary>
        /// Update a backend Update a backend
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>Task of BackendResponse</returns>
        public async System.Threading.Tasks.Task<BackendResponse> UpdateBackendAsync (string backendId, BackendRequest backendRequest)
        {
             ApiResponse<BackendResponse> localVarResponse = await UpdateBackendAsyncWithHttpInfo(backendId, backendRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a backend Update a backend
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="backendRequest">backendRequest</param>
        /// <returns>Task of ApiResponse (BackendResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BackendResponse>> UpdateBackendAsyncWithHttpInfo (string backendId, BackendRequest backendRequest)
        {
            // verify the required parameter 'backendId' is set
            if (backendId == null)
                throw new ApiException(400, "Missing required parameter 'backendId' when calling StorageApi->UpdateBackend");
            // verify the required parameter 'backendRequest' is set
            if (backendRequest == null)
                throw new ApiException(400, "Missing required parameter 'backendRequest' when calling StorageApi->UpdateBackend");

            var localVarPath = "/bucket-storage/0.7/backends/{backendId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (backendId != null) localVarPathParams.Add("backendId", Configuration.ApiClient.ParameterToString(backendId)); // path parameter
            if (backendRequest != null && backendRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(backendRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = backendRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBackend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackendResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackendResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackendResponse)));
            
        }

        /// <summary>
        /// Update a container Update an existing container with new container settings
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>ContainerResponse</returns>
        public ContainerResponse UpdateContainer (string containerId, ContainerRequest containerRequest)
        {
             ApiResponse<ContainerResponse> localVarResponse = UpdateContainerWithHttpInfo(containerId, containerRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a container Update an existing container with new container settings
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>ApiResponse of ContainerResponse</returns>
        public ApiResponse< ContainerResponse > UpdateContainerWithHttpInfo (string containerId, ContainerRequest containerRequest)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling StorageApi->UpdateContainer");
            // verify the required parameter 'containerRequest' is set
            if (containerRequest == null)
                throw new ApiException(400, "Missing required parameter 'containerRequest' when calling StorageApi->UpdateContainer");

            var localVarPath = "/bucket-storage/0.7/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (containerRequest != null && containerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(containerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = containerRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContainerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContainerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerResponse)));
            
        }

        /// <summary>
        /// Update a container Update an existing container with new container settings
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>Task of ContainerResponse</returns>
        public async System.Threading.Tasks.Task<ContainerResponse> UpdateContainerAsync (string containerId, ContainerRequest containerRequest)
        {
             ApiResponse<ContainerResponse> localVarResponse = await UpdateContainerAsyncWithHttpInfo(containerId, containerRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a container Update an existing container with new container settings
        /// </summary>
        /// <exception cref="Sphereon.SDK.STORAGE.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">containerId</param>
        /// <param name="containerRequest">containerRequest</param>
        /// <returns>Task of ApiResponse (ContainerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContainerResponse>> UpdateContainerAsyncWithHttpInfo (string containerId, ContainerRequest containerRequest)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling StorageApi->UpdateContainer");
            // verify the required parameter 'containerRequest' is set
            if (containerRequest == null)
                throw new ApiException(400, "Missing required parameter 'containerRequest' when calling StorageApi->UpdateContainer");

            var localVarPath = "/bucket-storage/0.7/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (containerRequest != null && containerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(containerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = containerRequest; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContainerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContainerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContainerResponse)));
            
        }

    }
}
