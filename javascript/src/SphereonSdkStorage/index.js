/**
 * Storage
 * Sphereon Storage APIs provide an abstraction layer for storage of containers (folders) and objects (files), using a filesystem backend or AWS-s3, Azure blobstorage or Google cloud storage backend.
 *
 * OpenAPI spec version: 0.7
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSdkStorage/ApiClient', 'SphereonSdkStorage/model/BackendRequest', 'SphereonSdkStorage/model/BackendResponse', 'SphereonSdkStorage/model/ContainerRequest', 'SphereonSdkStorage/model/ContainerResponse', 'SphereonSdkStorage/model/Error', 'SphereonSdkStorage/model/ErrorResponse', 'SphereonSdkStorage/model/OAuth2Credentials', 'SphereonSdkStorage/model/OAuthCredentials', 'SphereonSdkStorage/model/RequestCredentials', 'SphereonSdkStorage/model/UsernamePasswordCredentials', 'SphereonSdkStorage/api/StorageApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/BackendRequest'), require('./model/BackendResponse'), require('./model/ContainerRequest'), require('./model/ContainerResponse'), require('./model/Error'), require('./model/ErrorResponse'), require('./model/OAuth2Credentials'), require('./model/OAuthCredentials'), require('./model/RequestCredentials'), require('./model/UsernamePasswordCredentials'), require('./api/StorageApi'));
  }
}(function(ApiClient, BackendRequest, BackendResponse, ContainerRequest, ContainerResponse, Error, ErrorResponse, OAuth2Credentials, OAuthCredentials, RequestCredentials, UsernamePasswordCredentials, StorageApi) {
  'use strict';

  /**
   * Sphereon_Storage_APIs_provide_an_abstraction_layer_for_storage_of_containers__folders_and_objects__files_using_a_filesystem_backend_or_AWS_s3_Azure_blobstorage_or_Google_cloud_storage_backend_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Storage = require('SphereonSdkStorage/index'); // See note below*.
   * var xxxSvc = new Storage.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Storage.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['SphereonSdkStorage/index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Storage.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Storage.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module SphereonSdkStorage/index
   * @version 0.7
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:SphereonSdkStorage/ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The BackendRequest model constructor.
     * @property {module:SphereonSdkStorage/model/BackendRequest}
     */
    BackendRequest: BackendRequest,
    /**
     * The BackendResponse model constructor.
     * @property {module:SphereonSdkStorage/model/BackendResponse}
     */
    BackendResponse: BackendResponse,
    /**
     * The ContainerRequest model constructor.
     * @property {module:SphereonSdkStorage/model/ContainerRequest}
     */
    ContainerRequest: ContainerRequest,
    /**
     * The ContainerResponse model constructor.
     * @property {module:SphereonSdkStorage/model/ContainerResponse}
     */
    ContainerResponse: ContainerResponse,
    /**
     * The Error model constructor.
     * @property {module:SphereonSdkStorage/model/Error}
     */
    Error: Error,
    /**
     * The ErrorResponse model constructor.
     * @property {module:SphereonSdkStorage/model/ErrorResponse}
     */
    ErrorResponse: ErrorResponse,
    /**
     * The OAuth2Credentials model constructor.
     * @property {module:SphereonSdkStorage/model/OAuth2Credentials}
     */
    OAuth2Credentials: OAuth2Credentials,
    /**
     * The OAuthCredentials model constructor.
     * @property {module:SphereonSdkStorage/model/OAuthCredentials}
     */
    OAuthCredentials: OAuthCredentials,
    /**
     * The RequestCredentials model constructor.
     * @property {module:SphereonSdkStorage/model/RequestCredentials}
     */
    RequestCredentials: RequestCredentials,
    /**
     * The UsernamePasswordCredentials model constructor.
     * @property {module:SphereonSdkStorage/model/UsernamePasswordCredentials}
     */
    UsernamePasswordCredentials: UsernamePasswordCredentials,
    /**
     * The StorageApi service constructor.
     * @property {module:SphereonSdkStorage/api/StorageApi}
     */
    StorageApi: StorageApi
  };

  return exports;
}));
