/**
 * Storage
 * Sphereon Storage APIs provide an abstraction layer for storage of containers (folders) and objects (files), using a filesystem backend or AWS-s3, Azure blobstorage or Google cloud storage backend.
 *
 * OpenAPI spec version: 0.7
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSdkStorage/ApiClient', 'SphereonSdkStorage/model/OAuth2Credentials', 'SphereonSdkStorage/model/OAuthCredentials', 'SphereonSdkStorage/model/UsernamePasswordCredentials'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./OAuth2Credentials'), require('./OAuthCredentials'), require('./UsernamePasswordCredentials'));
  } else {
    // Browser globals (root is window)
    if (!root.Storage) {
      root.Storage = {};
    }
    root.Storage.RequestCredentials = factory(root.Storage.ApiClient, root.Storage.OAuth2Credentials, root.Storage.OAuthCredentials, root.Storage.UsernamePasswordCredentials);
  }
}(this, function(ApiClient, OAuth2Credentials, OAuthCredentials, UsernamePasswordCredentials) {
  'use strict';




  /**
   * The RequestCredentials model module.
   * @module SphereonSdkStorage/model/RequestCredentials
   * @version 0.7
   */

  /**
   * Constructs a new <code>RequestCredentials</code>.
   * @alias module:SphereonSdkStorage/model/RequestCredentials
   * @class
   */
  var exports = function() {
    var _this = this;





  };

  /**
   * Constructs a <code>RequestCredentials</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:SphereonSdkStorage/model/RequestCredentials} obj Optional instance to populate.
   * @return {module:SphereonSdkStorage/model/RequestCredentials} The populated <code>RequestCredentials</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('credentialType')) {
        obj['credentialType'] = ApiClient.convertToType(data['credentialType'], 'String');
      }
      if (data.hasOwnProperty('oauth2Credentials')) {
        obj['oauth2Credentials'] = OAuth2Credentials.constructFromObject(data['oauth2Credentials']);
      }
      if (data.hasOwnProperty('oauthCredentials')) {
        obj['oauthCredentials'] = OAuthCredentials.constructFromObject(data['oauthCredentials']);
      }
      if (data.hasOwnProperty('usernamePasswordCredentials')) {
        obj['usernamePasswordCredentials'] = UsernamePasswordCredentials.constructFromObject(data['usernamePasswordCredentials']);
      }
    }
    return obj;
  }

  /**
   * The credentials class type to be used.
   * @member {module:SphereonSdkStorage/model/RequestCredentials.CredentialTypeEnum} credentialType
   */
  exports.prototype['credentialType'] = undefined;
  /**
   * The oauth2Credentials for this backend.
   * @member {module:SphereonSdkStorage/model/OAuth2Credentials} oauth2Credentials
   */
  exports.prototype['oauth2Credentials'] = undefined;
  /**
   * The usernamePasswordCredentials for this backend.
   * @member {module:SphereonSdkStorage/model/OAuthCredentials} oauthCredentials
   */
  exports.prototype['oauthCredentials'] = undefined;
  /**
   * The usernamePasswordCredentials for this backend.
   * @member {module:SphereonSdkStorage/model/UsernamePasswordCredentials} usernamePasswordCredentials
   */
  exports.prototype['usernamePasswordCredentials'] = undefined;


  /**
   * Allowed values for the <code>credentialType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.CredentialTypeEnum = {
    /**
     * value: "com.sphereon.libs.storage.client.api.model.credentials.NoCredentials"
     * @const
     */
    "NoCredentials": "com.sphereon.libs.storage.client.api.model.credentials.NoCredentials",
    /**
     * value: "com.sphereon.libs.storage.client.api.model.credentials.OAuthCredentials"
     * @const
     */
    "OAuthCredentials": "com.sphereon.libs.storage.client.api.model.credentials.OAuthCredentials",
    /**
     * value: "com.sphereon.libs.storage.client.api.model.credentials.OAuth2Credentials"
     * @const
     */
    "OAuth2Credentials": "com.sphereon.libs.storage.client.api.model.credentials.OAuth2Credentials",
    /**
     * value: "com.sphereon.libs.storage.client.api.model.credentials.UsernamePasswordCredentials"
     * @const
     */
    "UsernamePasswordCredentials": "com.sphereon.libs.storage.client.api.model.credentials.UsernamePasswordCredentials"  };


  return exports;
}));


