/**
 * Storage
 * Sphereon Storage APIs provide an abstraction layer for storage of containers (folders) and objects (files), using a filesystem backend or AWS-s3, Azure blobstorage or Google cloud storage backend.
 *
 * OpenAPI spec version: 0.7
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSdkStorage/ApiClient', 'SphereonSdkStorage/model/BackendRequest', 'SphereonSdkStorage/model/BackendResponse', 'SphereonSdkStorage/model/ErrorResponse', 'SphereonSdkStorage/model/ContainerResponse', 'SphereonSdkStorage/model/ContainerRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BackendRequest'), require('../model/BackendResponse'), require('../model/ErrorResponse'), require('../model/ContainerResponse'), require('../model/ContainerRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.Storage) {
      root.Storage = {};
    }
    root.Storage.StorageApi = factory(root.Storage.ApiClient, root.Storage.BackendRequest, root.Storage.BackendResponse, root.Storage.ErrorResponse, root.Storage.ContainerResponse, root.Storage.ContainerRequest);
  }
}(this, function(ApiClient, BackendRequest, BackendResponse, ErrorResponse, ContainerResponse, ContainerRequest) {
  'use strict';

  /**
   * Storage service.
   * @module SphereonSdkStorage/api/StorageApi
   * @version 0.7
   */

  /**
   * Constructs a new StorageApi. 
   * @alias module:SphereonSdkStorage/api/StorageApi
   * @class
   * @param {module:SphereonSdkStorage/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:SphereonSdkStorage/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createBackend operation.
     * @callback module:SphereonSdkStorage/api/StorageApi~createBackendCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSdkStorage/model/BackendResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new backend
     * Create a new backend
     * @param {module:SphereonSdkStorage/model/BackendRequest} backendRequest backendRequest
     * @param {module:SphereonSdkStorage/api/StorageApi~createBackendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSdkStorage/model/BackendResponse}
     */
    this.createBackend = function(backendRequest, callback) {
      var postBody = backendRequest;

      // verify the required parameter 'backendRequest' is set
      if (backendRequest == undefined || backendRequest == null) {
        throw "Missing the required parameter 'backendRequest' when calling createBackend";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = BackendResponse;

      return this.apiClient.callApi(
        '/bucket-storage/0.7/backends', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createContainer operation.
     * @callback module:SphereonSdkStorage/api/StorageApi~createContainerCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSdkStorage/model/ContainerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new container
     * Create a new container
     * @param {module:SphereonSdkStorage/model/ContainerRequest} containerRequest containerRequest
     * @param {module:SphereonSdkStorage/api/StorageApi~createContainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSdkStorage/model/ContainerResponse}
     */
    this.createContainer = function(containerRequest, callback) {
      var postBody = containerRequest;

      // verify the required parameter 'containerRequest' is set
      if (containerRequest == undefined || containerRequest == null) {
        throw "Missing the required parameter 'containerRequest' when calling createContainer";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ContainerResponse;

      return this.apiClient.callApi(
        '/bucket-storage/0.7/containers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createObject operation.
     * @callback module:SphereonSdkStorage/api/StorageApi~createObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new object within a container
     * Create a new object within a container. If the container did not exist yet, it will be created on the fly with a default policy, hence no 404 http status will be returned
     * @param {String} containerId containerId
     * @param {String} objectPath objectPath
     * @param {File} stream stream
     * @param {module:SphereonSdkStorage/api/StorageApi~createObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createObject = function(containerId, objectPath, stream, callback) {
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId == undefined || containerId == null) {
        throw "Missing the required parameter 'containerId' when calling createObject";
      }

      // verify the required parameter 'objectPath' is set
      if (objectPath == undefined || objectPath == null) {
        throw "Missing the required parameter 'objectPath' when calling createObject";
      }

      // verify the required parameter 'stream' is set
      if (stream == undefined || stream == null) {
        throw "Missing the required parameter 'stream' when calling createObject";
      }


      var pathParams = {
        'containerId': containerId,
        'objectPath': objectPath
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'stream': stream
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bucket-storage/0.7/containers/{containerId}/objects/{objectPath}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBackend operation.
     * @callback module:SphereonSdkStorage/api/StorageApi~deleteBackendCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSdkStorage/model/BackendResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a backend
     * Delete a backend
     * @param {String} backendId backendId
     * @param {module:SphereonSdkStorage/api/StorageApi~deleteBackendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSdkStorage/model/BackendResponse}
     */
    this.deleteBackend = function(backendId, callback) {
      var postBody = null;

      // verify the required parameter 'backendId' is set
      if (backendId == undefined || backendId == null) {
        throw "Missing the required parameter 'backendId' when calling deleteBackend";
      }


      var pathParams = {
        'backendId': backendId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = BackendResponse;

      return this.apiClient.callApi(
        '/bucket-storage/0.7/backends/{backendId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContainer operation.
     * @callback module:SphereonSdkStorage/api/StorageApi~deleteContainerCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSdkStorage/model/ContainerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing container
     * Delete an existing container including the stored objects if indicated.
     * @param {String} containerId containerId
     * @param {Object} opts Optional parameters
     * @param {module:SphereonSdkStorage/model/String} opts._delete delete
     * @param {module:SphereonSdkStorage/api/StorageApi~deleteContainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSdkStorage/model/ContainerResponse}
     */
    this.deleteContainer = function(containerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId == undefined || containerId == null) {
        throw "Missing the required parameter 'containerId' when calling deleteContainer";
      }


      var pathParams = {
        'containerId': containerId
      };
      var queryParams = {
        'delete': opts['_delete']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ContainerResponse;

      return this.apiClient.callApi(
        '/bucket-storage/0.7/containers/{containerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteObject operation.
     * @callback module:SphereonSdkStorage/api/StorageApi~deleteObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing object from a container.
     * Delete an existing object from a container. There is no request nor response body for a delete request.
     * @param {String} containerId containerId
     * @param {String} objectPath objectPath
     * @param {module:SphereonSdkStorage/api/StorageApi~deleteObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteObject = function(containerId, objectPath, callback) {
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId == undefined || containerId == null) {
        throw "Missing the required parameter 'containerId' when calling deleteObject";
      }

      // verify the required parameter 'objectPath' is set
      if (objectPath == undefined || objectPath == null) {
        throw "Missing the required parameter 'objectPath' when calling deleteObject";
      }


      var pathParams = {
        'containerId': containerId,
        'objectPath': objectPath
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bucket-storage/0.7/containers/{containerId}/objects/{objectPath}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackendInfo operation.
     * @callback module:SphereonSdkStorage/api/StorageApi~getBackendInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSdkStorage/model/ContainerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get backend information
     * Get information on a backend
     * @param {String} backendId backendId
     * @param {module:SphereonSdkStorage/api/StorageApi~getBackendInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSdkStorage/model/ContainerResponse}
     */
    this.getBackendInfo = function(backendId, callback) {
      var postBody = null;

      // verify the required parameter 'backendId' is set
      if (backendId == undefined || backendId == null) {
        throw "Missing the required parameter 'backendId' when calling getBackendInfo";
      }


      var pathParams = {
        'backendId': backendId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ContainerResponse;

      return this.apiClient.callApi(
        '/bucket-storage/0.7/backends/{backendId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContainerInfo operation.
     * @callback module:SphereonSdkStorage/api/StorageApi~getContainerInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSdkStorage/model/ContainerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get container information
     * Get information on a container
     * @param {String} containerId containerId
     * @param {module:SphereonSdkStorage/api/StorageApi~getContainerInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSdkStorage/model/ContainerResponse}
     */
    this.getContainerInfo = function(containerId, callback) {
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId == undefined || containerId == null) {
        throw "Missing the required parameter 'containerId' when calling getContainerInfo";
      }


      var pathParams = {
        'containerId': containerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ContainerResponse;

      return this.apiClient.callApi(
        '/bucket-storage/0.7/containers/{containerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getObject operation.
     * @callback module:SphereonSdkStorage/api/StorageApi~getObjectCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an existing object from a container
     * Get an existing object from a container
     * @param {String} containerId containerId
     * @param {String} objectPath objectPath
     * @param {module:SphereonSdkStorage/api/StorageApi~getObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getObject = function(containerId, objectPath, callback) {
      var postBody = null;

      // verify the required parameter 'containerId' is set
      if (containerId == undefined || containerId == null) {
        throw "Missing the required parameter 'containerId' when calling getObject";
      }

      // verify the required parameter 'objectPath' is set
      if (objectPath == undefined || objectPath == null) {
        throw "Missing the required parameter 'objectPath' when calling getObject";
      }


      var pathParams = {
        'containerId': containerId,
        'objectPath': objectPath
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream', 'application/json;charset=UTF-8'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/bucket-storage/0.7/containers/{containerId}/objects/{objectPath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listContainers operation.
     * @callback module:SphereonSdkStorage/api/StorageApi~listContainersCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSdkStorage/model/ContainerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List containers
     * List containers for the given backend name or id.
     * @param {String} backendId backendId
     * @param {module:SphereonSdkStorage/api/StorageApi~listContainersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSdkStorage/model/ContainerResponse}
     */
    this.listContainers = function(backendId, callback) {
      var postBody = null;

      // verify the required parameter 'backendId' is set
      if (backendId == undefined || backendId == null) {
        throw "Missing the required parameter 'backendId' when calling listContainers";
      }


      var pathParams = {
        'backendId': backendId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ContainerResponse;

      return this.apiClient.callApi(
        '/bucket-storage/0.7/backends/{backendId}/containers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBackend operation.
     * @callback module:SphereonSdkStorage/api/StorageApi~updateBackendCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSdkStorage/model/BackendResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a backend
     * Update a backend
     * @param {String} backendId backendId
     * @param {module:SphereonSdkStorage/model/BackendRequest} backendRequest backendRequest
     * @param {module:SphereonSdkStorage/api/StorageApi~updateBackendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSdkStorage/model/BackendResponse}
     */
    this.updateBackend = function(backendId, backendRequest, callback) {
      var postBody = backendRequest;

      // verify the required parameter 'backendId' is set
      if (backendId == undefined || backendId == null) {
        throw "Missing the required parameter 'backendId' when calling updateBackend";
      }

      // verify the required parameter 'backendRequest' is set
      if (backendRequest == undefined || backendRequest == null) {
        throw "Missing the required parameter 'backendRequest' when calling updateBackend";
      }


      var pathParams = {
        'backendId': backendId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = BackendResponse;

      return this.apiClient.callApi(
        '/bucket-storage/0.7/backends/{backendId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContainer operation.
     * @callback module:SphereonSdkStorage/api/StorageApi~updateContainerCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSdkStorage/model/ContainerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a container
     * Update an existing container with new container settings
     * @param {String} containerId containerId
     * @param {module:SphereonSdkStorage/model/ContainerRequest} containerRequest containerRequest
     * @param {module:SphereonSdkStorage/api/StorageApi~updateContainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSdkStorage/model/ContainerResponse}
     */
    this.updateContainer = function(containerId, containerRequest, callback) {
      var postBody = containerRequest;

      // verify the required parameter 'containerId' is set
      if (containerId == undefined || containerId == null) {
        throw "Missing the required parameter 'containerId' when calling updateContainer";
      }

      // verify the required parameter 'containerRequest' is set
      if (containerRequest == undefined || containerRequest == null) {
        throw "Missing the required parameter 'containerRequest' when calling updateContainer";
      }


      var pathParams = {
        'containerId': containerId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ContainerResponse;

      return this.apiClient.callApi(
        '/bucket-storage/0.7/containers/{containerId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
