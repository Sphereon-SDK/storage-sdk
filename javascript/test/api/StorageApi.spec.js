/**
 * Storage
 * Sphereon Storage APIs provide an abstraction layer for storage of containers (folders) and objects (files), using a filesystem backend or AWS-s3, Azure blobstorage or Google cloud storage backend.
 *
 * OpenAPI spec version: 0.8
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Storage);
  }
}(this, function(expect, Storage) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Storage.StorageApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StorageApi', function() {
    describe('createBackend', function() {
      it('should call createBackend successfully', function(done) {
        //uncomment below and update the code to test createBackend
        //instance.createBackend(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createContainer', function() {
      it('should call createContainer successfully', function(done) {
        //uncomment below and update the code to test createContainer
        //instance.createContainer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStreamUsingPath', function() {
      it('should call createStreamUsingPath successfully', function(done) {
        //uncomment below and update the code to test createStreamUsingPath
        //instance.createStreamUsingPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBackend', function() {
      it('should call deleteBackend successfully', function(done) {
        //uncomment below and update the code to test deleteBackend
        //instance.deleteBackend(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteContainer', function() {
      it('should call deleteContainer successfully', function(done) {
        //uncomment below and update the code to test deleteContainer
        //instance.deleteContainer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStreamUsingLocation', function() {
      it('should call deleteStreamUsingLocation successfully', function(done) {
        //uncomment below and update the code to test deleteStreamUsingLocation
        //instance.deleteStreamUsingLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStreamUsingPath', function() {
      it('should call deleteStreamUsingPath successfully', function(done) {
        //uncomment below and update the code to test deleteStreamUsingPath
        //instance.deleteStreamUsingPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBackendInfo', function() {
      it('should call getBackendInfo successfully', function(done) {
        //uncomment below and update the code to test getBackendInfo
        //instance.getBackendInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContainer', function() {
      it('should call getContainer successfully', function(done) {
        //uncomment below and update the code to test getContainer
        //instance.getContainer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStreamUsingLocation', function() {
      it('should call getStreamUsingLocation successfully', function(done) {
        //uncomment below and update the code to test getStreamUsingLocation
        //instance.getStreamUsingLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStreamUsingPath', function() {
      it('should call getStreamUsingPath successfully', function(done) {
        //uncomment below and update the code to test getStreamUsingPath
        //instance.getStreamUsingPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInfoUsingLocation', function() {
      it('should call listInfoUsingLocation successfully', function(done) {
        //uncomment below and update the code to test listInfoUsingLocation
        //instance.listInfoUsingLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInfoUsingPath', function() {
      it('should call listInfoUsingPath successfully', function(done) {
        //uncomment below and update the code to test listInfoUsingPath
        //instance.listInfoUsingPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInfoUsingRoot', function() {
      it('should call listInfoUsingRoot successfully', function(done) {
        //uncomment below and update the code to test listInfoUsingRoot
        //instance.listInfoUsingRoot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBackend', function() {
      it('should call updateBackend successfully', function(done) {
        //uncomment below and update the code to test updateBackend
        //instance.updateBackend(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContainer', function() {
      it('should call updateContainer successfully', function(done) {
        //uncomment below and update the code to test updateContainer
        //instance.updateContainer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStreamUsingPath', function() {
      it('should call updateStreamUsingPath successfully', function(done) {
        //uncomment below and update the code to test updateStreamUsingPath
        //instance.updateStreamUsingPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
